; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\out\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\retarget.d --cpu=Cortex-M3 --apcs=interwork -I.\inc -I.\inc\file_system -I.\inc\IR -IC:\Keil\ARM\RL\TCPnet\Drivers -I.\inc\tcpip -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -DLPC1700 -DFLASH_512 -DSTDIO --omf_browse=.\out\retarget.crf src\Retarget.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  sendchar PROC
;;;42      *----------------------------------------------------------------------------*/
;;;43     int sendchar (int c) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;44     
;;;45       if (c == '\n')  {
000004  280a              CMP      r0,#0xa
000006  d103              BNE      |L1.16|
;;;46       	uart_putChar (0, 0x0D);
000008  210d              MOVS     r1,#0xd
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       uart_putChar
                  |L1.16|
;;;47     	}
;;;48       uart_putChar (0, c);
000010  4621              MOV      r1,r4
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       uart_putChar
;;;49       
;;;50     
;;;51       return (c);
000018  4620              MOV      r0,r4
;;;52     }
00001a  bd10              POP      {r4,pc}
;;;53     
                          ENDP

                  getkey PROC
;;;57      *----------------------------------------------------------------------------*/
;;;58     int getkey (void) {
00001c  2000              MOVS     r0,#0
;;;59     
;;;60       return (uart_getChar(0));
00001e  f7ffbffe          B.W      uart_getChar
;;;61     }
;;;62     #endif
                          ENDP

                  _ttywrch PROC
;;;65     
;;;66     void _ttywrch (int ch) {
000022  e7fe              B        sendchar
;;;67     #ifdef STDIO
;;;68       sendchar(ch);	
;;;69     #endif
;;;70     }
;;;71     
                          ENDP

                  _sys_open PROC
;;;73     
;;;74     FILEHANDLE _sys_open (const char *name, int openmode) {
000024  b570              PUSH     {r4-r6,lr}
000026  460d              MOV      r5,r1
000028  4604              MOV      r4,r0
;;;75       /* Register standard Input Output devices. */
;;;76       if (strcmp(name, "STDIN") == 0) {
00002a  a13e              ADR      r1,|L1.292|
00002c  f7fffffe          BL       strcmp
000030  b178              CBZ      r0,|L1.82|
;;;77         return (STDIN);
;;;78       }
;;;79       if (strcmp(name, "STDOUT") == 0) {
000032  a13e              ADR      r1,|L1.300|
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       strcmp
00003a  b168              CBZ      r0,|L1.88|
;;;80         return (STDOUT);
;;;81       }
;;;82       if (strcmp(name, "STDERR") == 0) {
00003c  a13d              ADR      r1,|L1.308|
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       strcmp
000044  b158              CBZ      r0,|L1.94|
;;;83         return (STDERR);
;;;84       }
;;;85       return (__sys_open (name, openmode));
000046  4629              MOV      r1,r5
000048  4620              MOV      r0,r4
00004a  e8bd4070          POP      {r4-r6,lr}
00004e  f7ffbffe          B.W      __sys_open
                  |L1.82|
000052  f2480001          MOV      r0,#0x8001            ;77
;;;86     }
000056  bd70              POP      {r4-r6,pc}
                  |L1.88|
000058  f2480002          MOV      r0,#0x8002            ;80
00005c  bd70              POP      {r4-r6,pc}
                  |L1.94|
00005e  f2480003          MOV      r0,#0x8003            ;83
000062  bd70              POP      {r4-r6,pc}
;;;87     
                          ENDP

                  _sys_close PROC
;;;89     
;;;90     int _sys_close (FILEHANDLE fh) {
000064  f5b04f00          CMP      r0,#0x8000
;;;91       if (fh > 0x8000) {
000068  dd01              BLE      |L1.110|
;;;92         return (0);
00006a  2000              MOVS     r0,#0
;;;93       }
;;;94       return (__sys_close (fh));
;;;95     }
00006c  4770              BX       lr
                  |L1.110|
00006e  f7ffbffe          B.W      __sys_close
;;;96     
                          ENDP

                  _sys_write PROC
;;;98     
;;;99     int _sys_write (FILEHANDLE fh, const U8 *buf, U32 len, int mode) {
000072  b570              PUSH     {r4-r6,lr}
000074  460d              MOV      r5,r1
;;;100    #ifdef STDIO
;;;101      if (fh == STDOUT) {
000076  f5a04100          SUB      r1,r0,#0x8000
00007a  4614              MOV      r4,r2                 ;99
00007c  3902              SUBS     r1,#2
00007e  d108              BNE      |L1.146|
                  |L1.128|
;;;102        /* Standard Output device. */
;;;103        for (  ; len; len--) {
000080  b12c              CBZ      r4,|L1.142|
;;;104          sendchar (*buf++);
000082  f8150b01          LDRB     r0,[r5],#1
000086  f7fffffe          BL       sendchar
00008a  1e64              SUBS     r4,r4,#1              ;103
00008c  e7f8              B        |L1.128|
                  |L1.142|
;;;105        }
;;;106        return (0);
00008e  2000              MOVS     r0,#0
;;;107      }
;;;108    #endif
;;;109      if (fh > 0x8000) {
;;;110        return (-1);
;;;111      }
;;;112      return (__sys_write (fh, buf, len));
;;;113    }
000090  bd70              POP      {r4-r6,pc}
                  |L1.146|
000092  f5b04f00          CMP      r0,#0x8000            ;109
000096  dd02              BLE      |L1.158|
000098  f04f30ff          MOV      r0,#0xffffffff        ;110
00009c  bd70              POP      {r4-r6,pc}
                  |L1.158|
00009e  4629              MOV      r1,r5                 ;112
0000a0  e8bd4070          POP      {r4-r6,lr}            ;112
0000a4  f7ffbffe          B.W      __sys_write
;;;114    
                          ENDP

                  _sys_read PROC
;;;116    
;;;117    int _sys_read (FILEHANDLE fh, U8 *buf, U32 len, int mode) {
0000a8  b570              PUSH     {r4-r6,lr}
0000aa  460d              MOV      r5,r1
;;;118    #ifdef STDIO
;;;119      if (fh == STDIN) {
0000ac  f2480101          MOV      r1,#0x8001
0000b0  4614              MOV      r4,r2                 ;117
0000b2  4288              CMP      r0,r1
0000b4  d108              BNE      |L1.200|
                  |L1.182|
;;;120        /* Standard Input device. */
;;;121        for (  ; len; len--) {
0000b6  b12c              CBZ      r4,|L1.196|
;;;122          *buf++ = getkey ();
0000b8  f7fffffe          BL       getkey
0000bc  f8050b01          STRB     r0,[r5],#1
0000c0  1e64              SUBS     r4,r4,#1              ;121
0000c2  e7f8              B        |L1.182|
                  |L1.196|
;;;123        }
;;;124        return (0);
0000c4  2000              MOVS     r0,#0
;;;125      }
;;;126    #endif
;;;127      if (fh > 0x8000) {
;;;128        return (-1);
;;;129      }
;;;130      return (__sys_read (fh, buf, len));
;;;131    }
0000c6  bd70              POP      {r4-r6,pc}
                  |L1.200|
0000c8  f5b04f00          CMP      r0,#0x8000            ;127
0000cc  dd02              BLE      |L1.212|
0000ce  f04f30ff          MOV      r0,#0xffffffff        ;128
0000d2  bd70              POP      {r4-r6,pc}
                  |L1.212|
0000d4  4629              MOV      r1,r5                 ;130
0000d6  e8bd4070          POP      {r4-r6,lr}            ;130
0000da  f7ffbffe          B.W      __sys_read
;;;132    
                          ENDP

                  _sys_istty PROC
;;;134    
;;;135    int _sys_istty (FILEHANDLE fh) {
0000de  f5b04f00          CMP      r0,#0x8000
;;;136      if (fh > 0x8000) {
0000e2  dd01              BLE      |L1.232|
;;;137        return (1);
0000e4  2001              MOVS     r0,#1
;;;138      }
;;;139      return (0);
;;;140    }
0000e6  4770              BX       lr
                  |L1.232|
0000e8  2000              MOVS     r0,#0                 ;139
0000ea  4770              BX       lr
;;;141    
                          ENDP

                  _sys_seek PROC
;;;143    
;;;144    int _sys_seek (FILEHANDLE fh, long pos) {
0000ec  f5b04f00          CMP      r0,#0x8000
;;;145      if (fh > 0x8000) {
0000f0  dd02              BLE      |L1.248|
;;;146        return (-1);
0000f2  f04f30ff          MOV      r0,#0xffffffff
;;;147      }
;;;148      return (__sys_seek (fh, pos));
;;;149    }
0000f6  4770              BX       lr
                  |L1.248|
0000f8  f7ffbffe          B.W      __sys_seek
;;;150    
                          ENDP

                  _sys_ensure PROC
;;;152    
;;;153    int _sys_ensure (FILEHANDLE fh) {
0000fc  f5b04f00          CMP      r0,#0x8000
;;;154      if (fh > 0x8000) {
000100  dd02              BLE      |L1.264|
;;;155        return (-1);
000102  f04f30ff          MOV      r0,#0xffffffff
;;;156      }
;;;157      return (__sys_ensure (fh));
;;;158    }
000106  4770              BX       lr
                  |L1.264|
000108  f7ffbffe          B.W      __sys_ensure
;;;159    
                          ENDP

                  _sys_flen PROC
;;;161    
;;;162    long _sys_flen (FILEHANDLE fh) {
00010c  f5b04f00          CMP      r0,#0x8000
;;;163      if (fh > 0x8000) {
000110  dd01              BLE      |L1.278|
;;;164        return (0);
000112  2000              MOVS     r0,#0
;;;165      }
;;;166      return (__sys_flen (fh));
;;;167    }
000114  4770              BX       lr
                  |L1.278|
000116  f7ffbffe          B.W      __sys_flen
;;;168    
                          ENDP

                  _sys_tmpnam PROC
;;;170    
;;;171    int _sys_tmpnam (char *name, int sig, unsigned maxlen) {
00011a  2001              MOVS     r0,#1
;;;172      return (1);
;;;173    }
00011c  4770              BX       lr
;;;174    
                          ENDP

                  _sys_command_string PROC
;;;176    
;;;177    char *_sys_command_string (char *cmd, int len) {
00011e  4770              BX       lr
;;;178      return (cmd);
;;;179    }
;;;180    
                          ENDP

                  _sys_exit PROC
                  |L1.288|
;;;182    
;;;183    void _sys_exit (int return_code) {
000120  e7fe              B        |L1.288|
;;;184      /* Endless loop. */
;;;185      while (1);
;;;186    }
;;;187    
                          ENDP

000122  0000              DCW      0x0000
                  |L1.292|
000124  53544449          DCB      "STDIN",0
000128  4e00    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L1.300|
00012c  5354444f          DCB      "STDOUT",0
000130  555400  
000133  00                DCB      0
                  |L1.308|
000134  53544445          DCB      "STDERR",0
000138  525200  
00013b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __stdin_name
000000  53544449          DCB      0x53,0x54,0x44,0x49
000004  4e00              DCB      0x4e,0x00

                          AREA ||area_number.5||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.5||, ||.constdata||
                  __stdout_name
000000  5354444f          DCB      0x53,0x54,0x44,0x4f
000004  555400            DCB      0x55,0x54,0x00

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  __stderr_name
000000  53544445          DCB      0x53,0x54,0x44,0x45
000004  525200            DCB      0x52,0x52,0x00
