; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\out\system_lpc17xx.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\system_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -I.\inc -I.\inc\file_system -I.\inc\IR -IC:\Keil\ARM\RL\TCPnet\Drivers -I.\inc\tcpip -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -DLPC1700 -DFLASH_512 --omf_browse=.\out\system_lpc17xx.crf src\system_LPC17xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;415     */
;;;416    void SystemInit (void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;417    {
;;;418    	unsigned int i,j;
;;;419    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;420      LPC_SC->SCS       = SCS_Val;
000002  487d              LDR      r0,|L1.504|
000004  2120              MOVS     r1,#0x20
000006  f8c011a0          STR      r1,[r0,#0x1a0]
                  |L1.10|
;;;421      if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
;;;422        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
00000a  f8d011a0          LDR      r1,[r0,#0x1a0]
00000e  0649              LSLS     r1,r1,#25
000010  d5fb              BPL      |L1.10|
;;;423      }
;;;424    
;;;425      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000012  f1000080          ADD      r0,r0,#0x80
000016  2403              MOVS     r4,#3
000018  f8c04084          STR      r4,[r0,#0x84]
;;;426    
;;;427      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
00001c  f04f0500          MOV      r5,#0
000020  f8c05128          STR      r5,[r0,#0x128]
;;;428      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000024  f8c0512c          STR      r5,[r0,#0x12c]
;;;429    
;;;430      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0       */
000028  f04f0601          MOV      r6,#1
00002c  f8c0608c          STR      r6,[r0,#0x8c]
;;;431    
;;;432    #if (PLL0_SETUP)
;;;433      LPC_SC->PLL0CFG   = PLL0CFG_Val;
000030  4972              LDR      r1,|L1.508|
000032  6041              STR      r1,[r0,#4]
;;;434      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000034  6006              STR      r6,[r0,#0]
;;;435      LPC_SC->PLL0FEED  = 0xAA;
000036  f04f03aa          MOV      r3,#0xaa
00003a  60c3              STR      r3,[r0,#0xc]
;;;436      LPC_SC->PLL0FEED  = 0x55;
00003c  f04f0155          MOV      r1,#0x55
000040  60c1              STR      r1,[r0,#0xc]
000042  f1a00080          SUB      r0,r0,#0x80
                  |L1.70|
;;;437      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
000046  f8d02088          LDR      r2,[r0,#0x88]
00004a  0152              LSLS     r2,r2,#5
00004c  d5fb              BPL      |L1.70|
;;;438    
;;;439      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
00004e  f8404f80          STR      r4,[r0,#0x80]!
;;;440      LPC_SC->PLL0FEED  = 0xAA;
000052  60c3              STR      r3,[r0,#0xc]
;;;441      LPC_SC->PLL0FEED  = 0x55;
000054  60c1              STR      r1,[r0,#0xc]
;;;442    #endif
;;;443    
;;;444    #if (PLL1_SETUP)
;;;445      LPC_SC->PLL1CFG   = PLL1CFG_Val;
000056  2223              MOVS     r2,#0x23
000058  6242              STR      r2,[r0,#0x24]
;;;446      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
00005a  6206              STR      r6,[r0,#0x20]
;;;447      LPC_SC->PLL1FEED  = 0xAA;
00005c  62c3              STR      r3,[r0,#0x2c]
;;;448      LPC_SC->PLL1FEED  = 0x55;
00005e  62c1              STR      r1,[r0,#0x2c]
000060  f1a00080          SUB      r0,r0,#0x80
                  |L1.100|
;;;449      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
000064  f8d020a8          LDR      r2,[r0,#0xa8]
000068  0552              LSLS     r2,r2,#21
00006a  d5fb              BPL      |L1.100|
00006c  f1000088          ADD      r0,r0,#0x88
;;;450    
;;;451      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
000070  6184              STR      r4,[r0,#0x18]
;;;452      LPC_SC->PLL1FEED  = 0xAA;
000072  6243              STR      r3,[r0,#0x24]
;;;453      LPC_SC->PLL1FEED  = 0x55;
000074  6241              STR      r1,[r0,#0x24]
;;;454    #else
;;;455      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
;;;456    #endif
;;;457    
;;;458      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
000076  4a62              LDR      r2,|L1.512|
000078  63c2              STR      r2,[r0,#0x3c]
;;;459    
;;;460      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
00007a  f8c05140          STR      r5,[r0,#0x140]
;;;461    #endif
;;;462    
;;;463      /* Determine clock frequency according to clock register values             */
;;;464      if (((LPC_SC->PLL0STAT >> 24)&3)==3) {/* If PLL0 enabled and connected      */
00007e  f8502988          LDR      r2,[r0],#-0x88
;;;465        switch (LPC_SC->CLKSRCSEL & 0x03) {
;;;466          case 0:                           /* Internal RC oscillator => PLL0     */
;;;467          case 3:                           /* Reserved, default to Internal RC   */
;;;468            SystemFrequency = (IRC_OSC * 
000082  4d60              LDR      r5,|L1.516|
000084  ea6f6212          MVN      r2,r2,LSR #24         ;464
000088  0792              LSLS     r2,r2,#30             ;464
;;;469                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;470                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;471                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;472            break;
;;;473          case 1:                           /* Main oscillator => PLL0            */
;;;474            SystemFrequency = (OSC_CLK * 
;;;475                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;476                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;477                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;478            break;
;;;479          case 2:                           /* RTC oscillator => PLL0             */
;;;480            SystemFrequency = (RTC_CLK * 
;;;481                              ((2 * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;482                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)    /
;;;483                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;484            break;
;;;485        }
;;;486      } else {
;;;487        switch (LPC_SC->CLKSRCSEL & 0x03) {
00008a  f8d0210c          LDR      r2,[r0,#0x10c]
00008e  f0020203          AND      r2,r2,#3
000092  d007              BEQ      |L1.164|
000094  b3ea              CBZ      r2,|L1.274|
000096  2a01              CMP      r2,#1
000098  d045              BEQ      |L1.294|
00009a  2a02              CMP      r2,#2
00009c  d049              BEQ      |L1.306|
00009e  2a03              CMP      r2,#3
0000a0  d150              BNE      |L1.324|
0000a2  e03a              B        |L1.282|
                  |L1.164|
0000a4  b12a              CBZ      r2,|L1.178|
0000a6  2a01              CMP      r2,#1                 ;465
0000a8  d013              BEQ      |L1.210|
0000aa  2a02              CMP      r2,#2                 ;465
0000ac  d022              BEQ      |L1.244|
0000ae  2a03              CMP      r2,#3                 ;465
0000b0  d148              BNE      |L1.324|
                  |L1.178|
0000b2  f8502f88          LDR      r2,[r0,#0x88]!        ;468
0000b6  f3c24207          UBFX     r2,r2,#16,#8          ;468
0000ba  6fc6              LDR      r6,[r0,#0x7c]         ;468
0000bc  1c52              ADDS     r2,r2,#1              ;468
0000be  b2f6              UXTB     r6,r6                 ;468
0000c0  1c76              ADDS     r6,r6,#1              ;468
0000c2  4372              MULS     r2,r6,r2              ;468
0000c4  f8506988          LDR      r6,[r0],#-0x88        ;468
0000c8  4f4f              LDR      r7,|L1.520|
0000ca  f3c6060e          UBFX     r6,r6,#0,#15          ;468
0000ce  1c76              ADDS     r6,r6,#1              ;468
0000d0  e00e              B        |L1.240|
                  |L1.210|
0000d2  f8502f88          LDR      r2,[r0,#0x88]!        ;474
0000d6  f3c24207          UBFX     r2,r2,#16,#8          ;474
0000da  6fc6              LDR      r6,[r0,#0x7c]         ;474
0000dc  1c52              ADDS     r2,r2,#1              ;474
0000de  b2f6              UXTB     r6,r6                 ;474
0000e0  1c76              ADDS     r6,r6,#1              ;474
0000e2  4372              MULS     r2,r6,r2              ;474
0000e4  f8506988          LDR      r6,[r0],#-0x88        ;474
0000e8  4f48              LDR      r7,|L1.524|
0000ea  f3c6060e          UBFX     r6,r6,#0,#15          ;474
0000ee  1c76              ADDS     r6,r6,#1              ;474
                  |L1.240|
0000f0  437e              MULS     r6,r7,r6              ;468
0000f2  e024              B        |L1.318|
                  |L1.244|
0000f4  f8502f88          LDR      r2,[r0,#0x88]!        ;480
0000f8  f3c24207          UBFX     r2,r2,#16,#8          ;480
0000fc  6fc6              LDR      r6,[r0,#0x7c]         ;480
0000fe  1c52              ADDS     r2,r2,#1              ;480
000100  b2f6              UXTB     r6,r6                 ;480
000102  1c76              ADDS     r6,r6,#1              ;480
000104  4372              MULS     r2,r6,r2              ;480
000106  f8506988          LDR      r6,[r0],#-0x88        ;480
00010a  f3c6060e          UBFX     r6,r6,#0,#15          ;480
00010e  1c76              ADDS     r6,r6,#1              ;480
000110  e000              B        |L1.276|
                  |L1.274|
000112  e002              B        |L1.282|
                  |L1.276|
000114  f44f477a          MOV      r7,#0xfa00            ;480
000118  e7ea              B        |L1.240|
                  |L1.282|
;;;488          case 0:                           /* Internal RC oscillator => PLL0     */
;;;489          case 3:                           /* Reserved, default to Internal RC   */
;;;490            SystemFrequency = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00011a  f8d02104          LDR      r2,[r0,#0x104]
00011e  4e3c              LDR      r6,|L1.528|
000120  b2d2              UXTB     r2,r2
000122  1c52              ADDS     r2,r2,#1
;;;491            break;
000124  e00b              B        |L1.318|
                  |L1.294|
;;;492          case 1:                           /* Main oscillator => PLL0            */
;;;493            SystemFrequency = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000126  f8d02104          LDR      r2,[r0,#0x104]
00012a  4e3a              LDR      r6,|L1.532|
00012c  b2d2              UXTB     r2,r2
00012e  1c52              ADDS     r2,r2,#1
;;;494            break;
000130  e005              B        |L1.318|
                  |L1.306|
;;;495          case 2:                           /* RTC oscillator => PLL0             */
;;;496            SystemFrequency = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000132  f8d02104          LDR      r2,[r0,#0x104]
000136  f44f46fa          MOV      r6,#0x7d00
00013a  b2d2              UXTB     r2,r2
00013c  1c52              ADDS     r2,r2,#1
                  |L1.318|
00013e  fbb6f2f2          UDIV     r2,r6,r2
000142  602a              STR      r2,[r5,#0]  ; SystemFrequency
                  |L1.324|
;;;497            break;
;;;498        }
;;;499      }
;;;500    
;;;501    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;502      LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
000144  6802              LDR      r2,[r0,#0]
000146  f4224270          BIC      r2,r2,#0xf000
00014a  f4424280          ORR      r2,r2,#0x4000
00014e  6002              STR      r2,[r0,#0]
;;;503    #endif
;;;504    
;;;505    	dir_ir();
000150  4831              LDR      r0,|L1.536|
000152  6c02              LDR      r2,[r0,#0x40]
000154  f0220208          BIC      r2,r2,#8
000158  6402              STR      r2,[r0,#0x40]
00015a  6c02              LDR      r2,[r0,#0x40]
00015c  f0420201          ORR      r2,r2,#1
000160  6402              STR      r2,[r0,#0x40]
000162  6c02              LDR      r2,[r0,#0x40]
000164  f0420202          ORR      r2,r2,#2
000168  6402              STR      r2,[r0,#0x40]
00016a  6c02              LDR      r2,[r0,#0x40]
00016c  f0420204          ORR      r2,r2,#4
000170  6402              STR      r2,[r0,#0x40]
000172  6dc2              LDR      r2,[r0,#0x5c]
000174  f0420201          ORR      r2,r2,#1
000178  65c2              STR      r2,[r0,#0x5c]
00017a  6dc2              LDR      r2,[r0,#0x5c]
00017c  f0420202          ORR      r2,r2,#2
000180  65c2              STR      r2,[r0,#0x5c]
000182  6dc2              LDR      r2,[r0,#0x5c]
000184  f0420204          ORR      r2,r2,#4
000188  65c2              STR      r2,[r0,#0x5c]
;;;506    	dir_buzzer();
00018a  6802              LDR      r2,[r0,#0]
00018c  f4423280          ORR      r2,r2,#0x10000
000190  6002              STR      r2,[r0,#0]
000192  69c2              LDR      r2,[r0,#0x1c]
000194  f4423280          ORR      r2,r2,#0x10000
000198  61c2              STR      r2,[r0,#0x1c]
;;;507    	dir_leds();
00019a  6802              LDR      r2,[r0,#0]
00019c  f0425280          ORR      r2,r2,#0x10000000
0001a0  6002              STR      r2,[r0,#0]
0001a2  6802              LDR      r2,[r0,#0]
0001a4  f0426200          ORR      r2,r2,#0x8000000
0001a8  6002              STR      r2,[r0,#0]
0001aa  69c2              LDR      r2,[r0,#0x1c]
0001ac  f0426200          ORR      r2,r2,#0x8000000
0001b0  61c2              STR      r2,[r0,#0x1c]
0001b2  69c2              LDR      r2,[r0,#0x1c]
0001b4  f0425280          ORR      r2,r2,#0x10000000
0001b8  61c2              STR      r2,[r0,#0x1c]
;;;508    
;;;509    	for(j=0;j<10000;j++)
0001ba  2200              MOVS     r2,#0
;;;510    		for(i=0;i<1000;i++);
0001bc  f44f767a          MOV      r6,#0x3e8
0001c0  f2427710          MOV      r7,#0x2710            ;509
                  |L1.452|
0001c4  2000              MOVS     r0,#0
                  |L1.454|
0001c6  1c40              ADDS     r0,r0,#1
0001c8  42b0              CMP      r0,r6
0001ca  d3fc              BCC      |L1.454|
0001cc  1c52              ADDS     r2,r2,#1              ;509
0001ce  42ba              CMP      r2,r7                 ;509
0001d0  d3f8              BCC      |L1.452|
;;;511    
;;;512    	/*                WDEN    */
;;;513    	LPC_WDT->WDMOD = (1<<0)	| (1<<1);
0001d2  f04f4080          MOV      r0,#0x40000000
0001d6  7004              STRB     r4,[r0,#0]
;;;514    	LPC_WDT->WDTC = 0xFFFFFF;
0001d8  f06f427f          MVN      r2,#0xff000000
0001dc  6042              STR      r2,[r0,#4]
;;;515    	LPC_WDT->WDFEED = 0xAA;
0001de  7203              STRB     r3,[r0,#8]
;;;516    	LPC_WDT->WDFEED = 0x55;
0001e0  7201              STRB     r1,[r0,#8]
;;;517    
;;;518    	//SysTick->LOAD = (SystemFrequency / 10) - 1; 	/*100ms*/
;;;519    	SysTick->LOAD = (SystemFrequency / 100) - 1;	/*10ms*/
0001e2  6828              LDR      r0,[r5,#0]  ; SystemFrequency
0001e4  2164              MOVS     r1,#0x64
0001e6  fbb0f1f1          UDIV     r1,r0,r1
0001ea  f04f20e0          MOV      r0,#0xe000e000
0001ee  1e49              SUBS     r1,r1,#1
0001f0  6141              STR      r1,[r0,#0x14]
;;;520    	//SysTick->LOAD = (SystemFrequency / 1000) - 1;	/*1ms*/
;;;521    
;;;522     	SysTick->CTRL = 0x05;
0001f2  2105              MOVS     r1,#5
0001f4  6101              STR      r1,[r0,#0x10]
;;;523    }
0001f6  bdf0              POP      {r4-r7,pc}
;;;524    
                          ENDP

                  |L1.504|
                          DCD      0x400fc000
                  |L1.508|
                          DCD      0x00050063
                  |L1.512|
                          DCD      0x042887de
                  |L1.516|
                          DCD      ||.data||
                  |L1.520|
                          DCD      0x007a1200
                  |L1.524|
                          DCD      0x016e3600
                  |L1.528|
                          DCD      0x003d0900
                  |L1.532|
                          DCD      0x00b71b00
                  |L1.536|
                          DCD      0x2009c000

                          AREA ||.data||, DATA, ALIGN=2

                  SystemFrequency
                          DCD      0x003d0900
