; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\out\extint.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\extint.d --cpu=Cortex-M3 --apcs=interwork -I.\inc -I.\inc\file_system -I.\inc\IR -IC:\Keil\ARM\RL\TCPnet\Drivers -I.\inc\tcpip -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -DLPC1700 -DFLASH_512 --omf_browse=.\out\extint.crf src\extint.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  get_new_ir PROC
;;;41     ****************************************************************************/
;;;42     char get_new_ir(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;43     {
;;;44     	FILE *f;
;;;45     	U32 i=0, j=0, x=0, n=0, id=0, pulse = 0, n_acertos=0;
000004  2400              MOVS     r4,#0
;;;46     	char str[30], strId[30], logic = 0, status = 1, erro = 0;
;;;47     	int ch=0;
;;;48     		
;;;49     	memset(ir,0xffff,sizeof(ir));
000006  f64f7bff          MOV      r11,#0xffff
00000a  b091              SUB      sp,sp,#0x44           ;43
00000c  4625              MOV      r5,r4                 ;46
00000e  2601              MOVS     r6,#1                 ;46
000010  46a0              MOV      r8,r4                 ;46
000012  465a              MOV      r2,r11
000014  f44f7148          MOV      r1,#0x320
000018  48fa              LDR      r0,|L1.1028|
00001a  f7fffffe          BL       __aeabi_memset
;;;50     	wdt_feed();
00001e  f04f4a80          MOV      r10,#0x40000000
000022  21aa              MOVS     r1,#0xaa
000024  f88a1008          STRB     r1,[r10,#8]
000028  2155              MOVS     r1,#0x55
00002a  f88a1008          STRB     r1,[r10,#8]
;;;51     	disable_timer(0);	/*Disabilita o timer 0*/
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       disable_timer
;;;52     	
;;;53     	ir_counter = 0;		/*Reseta contador do IR*/
000034  4ff4              LDR      r7,|L1.1032|
000036  2300              MOVS     r3,#0
;;;54     	LPC_TIM1->IR = 1;	/*Limpa flag da interrupção do timer 1*/
000038  48f4              LDR      r0,|L1.1036|
00003a  803b              STRH     r3,[r7,#0]            ;53
00003c  2201              MOVS     r2,#1
00003e  6002              STR      r2,[r0,#0]
;;;55     	LPC_TIM1->TCR = 2;	/*Reseta contador do timer 1*/
000040  2102              MOVS     r1,#2
000042  6041              STR      r1,[r0,#4]
;;;56     	LPC_TIM1->TCR = 1;	/*Inicia a contagem do timer 1*/
000044  6042              STR      r2,[r0,#4]
000046  4699              MOV      r9,r3                 ;45
                  |L1.72|
;;;57     	while(1)	
;;;58     	{	 			
;;;59     		if(LPC_TIM1->IR & (1<<0))
000048  48f0              LDR      r0,|L1.1036|
00004a  6801              LDR      r1,[r0,#0]
00004c  07c9              LSLS     r1,r1,#31
00004e  d005              BEQ      |L1.92|
;;;60     		{
;;;61     			LPC_TIM1->IR = 1;
000050  2101              MOVS     r1,#1
000052  6001              STR      r1,[r0,#0]
;;;62     			ir_counter++;
000054  8838              LDRH     r0,[r7,#0]  ; ir_counter
000056  f1000001          ADD      r0,r0,#1
00005a  8038              STRH     r0,[r7,#0]
                  |L1.92|
;;;63     		}
;;;64     
;;;65     		wdt_feed();
00005c  21aa              MOVS     r1,#0xaa
00005e  f88a1008          STRB     r1,[r10,#8]
000062  2155              MOVS     r1,#0x55
000064  f88a1008          STRB     r1,[r10,#8]
;;;66     		if(status)	/*Ainda está acontecendo a leitura do IR?*/
000068  b3be              CBZ      r6,|L1.218|
;;;67     		{
;;;68     			if(!RECEIVE_IR())	/*IR está em low?*/	
00006a  48e9              LDR      r0,|L1.1040|
00006c  6d41              LDR      r1,[r0,#0x54]
00006e  0709              LSLS     r1,r1,#28
000070  d406              BMI      |L1.128|
;;;69     			{
;;;70     				LED3_BOARD(1); 	
000072  6bc1              LDR      r1,[r0,#0x3c]
000074  f4412180          ORR      r1,r1,#0x40000
000078  63c1              STR      r1,[r0,#0x3c]
;;;71     				if(logic)	
00007a  b145              CBZ      r5,|L1.142|
;;;72     				{
;;;73     					logic = __FALSE;
00007c  2500              MOVS     r5,#0
;;;74     					pulse++;  
00007e  e005              B        |L1.140|
                  |L1.128|
;;;75     				}
;;;76     			}else
;;;77     			{
;;;78     				LED3_BOARD(0); 	
000080  6b81              LDR      r1,[r0,#0x38]
000082  f4412180          ORR      r1,r1,#0x40000
000086  6381              STR      r1,[r0,#0x38]
;;;79     				if(!logic)
000088  b90d              CBNZ     r5,|L1.142|
;;;80     				{
;;;81     					logic = __TRUE;
00008a  2501              MOVS     r5,#1
                  |L1.140|
;;;82     					pulse++;  
00008c  1c64              ADDS     r4,r4,#1
                  |L1.142|
;;;83     				}
;;;84     			}
;;;85     			if(pulse >= MAX_QTD_PULSOS-1)
00008e  f5b47fc7          CMP      r4,#0x18e
000092  d90b              BLS      |L1.172|
;;;86     			{
;;;87     				/*Overflow dos pulsos no IR*/	
;;;88     				memset(ir,0xFFFF,sizeof(ir));
000094  465a              MOV      r2,r11
000096  f44f7148          MOV      r1,#0x320
00009a  48da              LDR      r0,|L1.1028|
00009c  f7fffffe          BL       __aeabi_memset
;;;89     				ir_counter = 0;
;;;90     				pulse = 0;
0000a0  2400              MOVS     r4,#0
;;;91     				status = __FALSE;		/*Sinaliza que a leitura do IR já terminou*/
;;;92     				erro = __TRUE;			/*Sinaliza erro (Overflow de pulsos)*/	
0000a2  2001              MOVS     r0,#1
0000a4  f8a79000          STRH     r9,[r7,#0]            ;89
0000a8  4626              MOV      r6,r4                 ;91
0000aa  4680              MOV      r8,r0
                  |L1.172|
;;;93     			}
;;;94     					 		 
;;;95     			ir[pulse] = ((ir[pulse] == 0xFFFF) ? 0 : ir[pulse]) + ir_counter;	/*Vai incrementando os pulsos do IR*/
0000ac  4bd5              LDR      r3,|L1.1028|
0000ae  46cc              MOV      r12,r9
0000b0  4648              MOV      r0,r9
0000b2  f8331014          LDRH     r1,[r3,r4,LSL #1]
0000b6  465a              MOV      r2,r11
0000b8  4559              CMP      r1,r11
0000ba  d000              BEQ      |L1.190|
0000bc  4608              MOV      r0,r1
                  |L1.190|
0000be  8839              LDRH     r1,[r7,#0]  ; ir_counter
0000c0  4408              ADD      r0,r0,r1
0000c2  b280              UXTH     r0,r0
;;;96     			ir_counter = 0;											/*Reseta para um novo incremento*/
;;;97     			if(ir[pulse] * 4 >= 120000) /*Maior que 120ms?*/
0000c4  49d3              LDR      r1,|L1.1044|
0000c6  f8230014          STRH     r0,[r3,r4,LSL #1]     ;95
0000ca  f8a7c000          STRH     r12,[r7,#0]           ;96
0000ce  ebb10f80          CMP      r1,r0,LSL #2
0000d2  d803              BHI      |L1.220|
;;;98     			{	
;;;99     				ir[pulse] = 0xFFFF; /*Reseta o ultimo pulso (timeout)*/
0000d4  49cb              LDR      r1,|L1.1028|
0000d6  f8212014          STRH     r2,[r1,r4,LSL #1]
                  |L1.218|
;;;100    				status = __FALSE;	/*Sinaliza que a leitura do IR já terminou*/	
0000da  e001              B        |L1.224|
                  |L1.220|
;;;101    			}
;;;102    		}
;;;103    		
;;;104    		/*Sai do laço se o IR foi armazenado*/
;;;105    		if(!status)
0000dc  2e00              CMP      r6,#0
0000de  d1b3              BNE      |L1.72|
                  |L1.224|
;;;106    			break;
;;;107    	}
;;;108    	LPC_TIM1->TCR = 0;	/*Desabilita Timer 1*/
0000e0  49ca              LDR      r1,|L1.1036|
0000e2  f8c19004          STR      r9,[r1,#4]
;;;109    
;;;110    	if(pulse > 10 && erro == __FALSE)
0000e6  2c0a              CMP      r4,#0xa
0000e8  d902              BLS      |L1.240|
0000ea  f1b80f00          CMP      r8,#0
0000ee  d00e              BEQ      |L1.270|
                  |L1.240|
;;;111    	{		
;;;112    		printf("*****\r[IR Receiver...All Pulses:%u]\r",pulse);
;;;113    		fflush(stdout);
;;;114    		memcpy(ir_cmp,ir,sizeof(ir_cmp));
;;;115    
;;;116    		/*Loop para eliminar os pulsos de repetição do IR recebido*/
;;;117    		for(j=4;j<MAX_QTD_PULSOS;j++)
;;;118    		{
;;;119    			if(ir_cmp[j] == 0xFFFF || ir_cmp[j] <= 0x10)
;;;120    				break;
;;;121    			if(j < 70)
;;;122    				continue;
;;;123    			
;;;124    			printf("[Limited to 70 pulses]\r");
;;;125    			fflush(stdout);
;;;126    			for(n=j;n<MAX_QTD_PULSOS;n++)
;;;127    				ir_cmp[n] = 0xFFFF;	
;;;128    			break;		
;;;129    		}
;;;130    		pulse = j-4;
;;;131    
;;;132    		for(x=0;x<NUM_SCENE;x++)	/*Loop para comparar o IR recebido com apenas os IRs previamente cadastrados*/
;;;133    		{
;;;134    			wdt_feed();
;;;135    			memset(ir,0xFFFF,sizeof(ir));
;;;136    			memset(strId,0,sizeof(strId));
;;;137    			sprintf(strId,"%s%u.TXT\0",FILE_CMDIR,x);
;;;138    
;;;139    			f = fopen(strId,"r");
;;;140    
;;;141    			if(f == NULL)
;;;142    			{
;;;143    				/*Ocorreu erro na abertura do IR em questão (addr: i)mas continua no loop para abrir o restante dos IRs*/
;;;144    				continue;	
;;;145    			}
;;;146    			
;;;147    			id=0;
;;;148    			i=0;
;;;149    			memset(str,0,sizeof(str));
;;;150    			/*Laço para ler todo o IR no SD*/
;;;151    			while((ch = fgetc (f)) != EOF)
;;;152    			{
;;;153    				if(ch == '#')
;;;154    				{
;;;155    					ir[id] = atoi(str);
;;;156    					if(ir[id] <= 16)
;;;157    						break;
;;;158    					id++;		
;;;159    				}else
;;;160    				{
;;;161    					if(ch != '\r' && ch != '\n')
;;;162    					{
;;;163    						str[i] = ch;
;;;164    						i++;
;;;165    					}else
;;;166    					{
;;;167    						memset(str,0,sizeof(str));
;;;168    						i=0;
;;;169    					}
;;;170    				}
;;;171    			}
;;;172    			fclose(f);
;;;173    
;;;174    			/*Loop para eliminar os pulsos de repetição do IR que está gravado no sd*/
;;;175    			for(j=4;j<MAX_QTD_PULSOS;j++)
;;;176    			{
;;;177    				if(ir[j] == 0xFFFF || ir[j] <= 0x10)
;;;178    					break;
;;;179    				if(j < 70)
;;;180    					continue;
;;;181    				for(n=j;n<MAX_QTD_PULSOS;n++)
;;;182    					ir[n] = 0xFFFF;	
;;;183    				break;		
;;;184    			}
;;;185    
;;;186    			/*Comparação do IR recebido (ir_cmp) com o IR de endereço 'x' (ir) previamente armazenado no SD*/
;;;187    			if(ir[0] != 0xFFFF && ir[1] != 0xFFFF && ir[2] != 0xFFFF)	
;;;188    			{	
;;;189    				for(j=4,n_acertos=0;j<MAX_QTD_PULSOS;j++)
;;;190    				{
;;;191    					if(ir[j] != 0xffff && ir[j] >= 0x10)
;;;192    					{
;;;193    						if(ir_cmp[j] >= (ir[j] - (float)ir[j] * 0.3) && ir_cmp[j] <= (ir[j] + (float)ir[j] * 0.3))	/*Cada pulso está dentro do range de 30%?*/
;;;194    							n_acertos++;
;;;195    						else
;;;196    							break;	
;;;197    					}else
;;;198    						break;
;;;199    				}
;;;200    	
;;;201    				printf("[IR %u (SD)...Acertos:%u...Pulsos:%u]\r",x,n_acertos,pulse);
;;;202    				fflush(stdout);
;;;203    				
;;;204    				if(n_acertos >= pulse - 5 && n_acertos <= pulse + 5)
;;;205    				{
;;;206    					printf("[IR Scene found...Scene %u Run]\r*****\r\r",x);
;;;207    					fflush(stdout);
;;;208    					enable_timer(0);
;;;209    					
;;;210    					exe_scene(x);	/*Executa a cena referente ao endereço do IR recebido (reconhecido)*/
;;;211    					debounce_press = DEBOUNCE_PRESS_KEY;
;;;212    					debounce_release = DEBOUNCE_RELEASE_KEY;
;;;213    					return 1;
;;;214    				}
;;;215    			}else
;;;216    			{
;;;217    				/*Não encontrou o IR de endereço i*/
;;;218    				printf("[IR %u (SD) not found]\r",x);
;;;219    				fflush(stdout);
;;;220    			}
;;;221    		}
;;;222    		printf("[IR Scene not found]\r*****\r\r");
;;;223    		fflush(stdout);	
;;;224    			
;;;225    	}else	/*Falha na recepção de IR*/
;;;226    	if(pulse > 5)
0000f0  2c05              CMP      r4,#5
0000f2  d905              BLS      |L1.256|
;;;227    	{
;;;228    		printf("[Error CMD IR Scene]\r");
0000f4  a0c8              ADR      r0,|L1.1048|
                  |L1.246|
0000f6  f7fffffe          BL       __2printf
;;;229    		fflush(stdout);	
0000fa  48cd              LDR      r0,|L1.1072|
0000fc  f7fffffe          BL       fflush
                  |L1.256|
;;;230    	}
;;;231    
;;;232    	enable_timer(0);	
000100  2000              MOVS     r0,#0
000102  f7fffffe          BL       enable_timer
;;;233    	return 0;
000106  2000              MOVS     r0,#0
                  |L1.264|
;;;234    	
;;;235    }
000108  b011              ADD      sp,sp,#0x44
00010a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.270|
00010e  4621              MOV      r1,r4                 ;112
000110  a0c8              ADR      r0,|L1.1076|
000112  f7fffffe          BL       __2printf
000116  48c6              LDR      r0,|L1.1072|
000118  f7fffffe          BL       fflush
00011c  f44f7748          MOV      r7,#0x320             ;114
000120  463a              MOV      r2,r7                 ;114
000122  49b8              LDR      r1,|L1.1028|
000124  48cd              LDR      r0,|L1.1116|
000126  f7fffffe          BL       __aeabi_memcpy
00012a  49cc              LDR      r1,|L1.1116|
00012c  2404              MOVS     r4,#4                 ;117
00012e  465d              MOV      r5,r11                ;49
                  |L1.304|
000130  f8310014          LDRH     r0,[r1,r4,LSL #1]     ;119
000134  4689              MOV      r9,r1                 ;119
000136  42a8              CMP      r0,r5                 ;119
000138  d018              BEQ      |L1.364|
00013a  464e              MOV      r6,r9                 ;119
00013c  2810              CMP      r0,#0x10              ;119
00013e  d915              BLS      |L1.364|
000140  2c46              CMP      r4,#0x46              ;121
000142  d30f              BCC      |L1.356|
000144  a0c6              ADR      r0,|L1.1120|
000146  f7fffffe          BL       __2printf
00014a  48b9              LDR      r0,|L1.1072|
00014c  f7fffffe          BL       fflush
000150  4620              MOV      r0,r4                 ;126
000152  f44f71c8          MOV      r1,#0x190             ;126
000156  e002              B        |L1.350|
                  |L1.344|
000158  f8265010          STRH     r5,[r6,r0,LSL #1]     ;127
00015c  1c40              ADDS     r0,r0,#1              ;126
                  |L1.350|
00015e  4288              CMP      r0,r1                 ;126
000160  d3fa              BCC      |L1.344|
000162  e003              B        |L1.364|
                  |L1.356|
000164  1c64              ADDS     r4,r4,#1              ;117
000166  f5b47fc8          CMP      r4,#0x190             ;117
00016a  d3e1              BCC      |L1.304|
                  |L1.364|
00016c  1f24              SUBS     r4,r4,#4              ;130
00016e  2000              MOVS     r0,#0                 ;132
000170  46a3              MOV      r11,r4                ;130
000172  4680              MOV      r8,r0                 ;132
                  |L1.372|
000174  21aa              MOVS     r1,#0xaa              ;134
000176  0748              LSLS     r0,r1,#29             ;134
000178  7201              STRB     r1,[r0,#8]            ;134
00017a  2155              MOVS     r1,#0x55              ;134
00017c  7201              STRB     r1,[r0,#8]            ;134
00017e  f64f72ff          MOV      r2,#0xffff            ;135
000182  f44f7148          MOV      r1,#0x320             ;135
000186  489f              LDR      r0,|L1.1028|
000188  f7fffffe          BL       __aeabi_memset
00018c  2120              MOVS     r1,#0x20              ;136
00018e  a808              ADD      r0,sp,#0x20           ;136
000190  f7fffffe          BL       __aeabi_memclr4
000194  4643              MOV      r3,r8                 ;137
000196  a2b8              ADR      r2,|L1.1144|
000198  a1ba              ADR      r1,|L1.1156|
00019a  a808              ADD      r0,sp,#0x20           ;137
00019c  f7fffffe          BL       __2sprintf
0001a0  a1bb              ADR      r1,|L1.1168|
0001a2  a808              ADD      r0,sp,#0x20           ;139
0001a4  f7fffffe          BL       fopen
0001a8  0007              MOVS     r7,r0                 ;139
0001aa  d07e              BEQ      |L1.682|
0001ac  2500              MOVS     r5,#0                 ;147
0001ae  462c              MOV      r4,r5                 ;148
0001b0  2120              MOVS     r1,#0x20              ;149
0001b2  4668              MOV      r0,sp                 ;149
0001b4  f7fffffe          BL       __aeabi_memclr4
0001b8  46ea              MOV      r10,sp                ;46
0001ba  4e92              LDR      r6,|L1.1028|
0001bc  e018              B        |L1.496|
                  |L1.446|
0001be  2823              CMP      r0,#0x23              ;153
0001c0  d007              BEQ      |L1.466|
0001c2  280d              CMP      r0,#0xd               ;161
0001c4  d00f              BEQ      |L1.486|
0001c6  280a              CMP      r0,#0xa               ;161
0001c8  d00d              BEQ      |L1.486|
0001ca  f80a0004          STRB     r0,[r10,r4]           ;163
0001ce  1c64              ADDS     r4,r4,#1              ;164
0001d0  e00e              B        |L1.496|
                  |L1.466|
0001d2  4668              MOV      r0,sp                 ;155
0001d4  f7fffffe          BL       atoi
0001d8  b280              UXTH     r0,r0                 ;155
0001da  f8260015          STRH     r0,[r6,r5,LSL #1]     ;155
0001de  2810              CMP      r0,#0x10              ;156
0001e0  d90b              BLS      |L1.506|
0001e2  1c6d              ADDS     r5,r5,#1              ;158
0001e4  e004              B        |L1.496|
                  |L1.486|
0001e6  2120              MOVS     r1,#0x20              ;167
0001e8  4668              MOV      r0,sp                 ;167
0001ea  f7fffffe          BL       __aeabi_memclr4
0001ee  2400              MOVS     r4,#0                 ;168
                  |L1.496|
0001f0  4638              MOV      r0,r7                 ;151
0001f2  f7fffffe          BL       fgetc
0001f6  1c41              ADDS     r1,r0,#1              ;151
0001f8  d1e1              BNE      |L1.446|
                  |L1.506|
0001fa  4638              MOV      r0,r7                 ;172
0001fc  f7fffffe          BL       fclose
000200  2004              MOVS     r0,#4                 ;175
000202  f64f72ff          MOV      r2,#0xffff            ;49
000206  f44f7ac8          MOV      r10,#0x190            ;126
                  |L1.522|
00020a  f8361010          LDRH     r1,[r6,r0,LSL #1]     ;177
00020e  4291              CMP      r1,r2                 ;177
000210  d00e              BEQ      |L1.560|
000212  2910              CMP      r1,#0x10              ;177
000214  d90c              BLS      |L1.560|
000216  2846              CMP      r0,#0x46              ;179
000218  d307              BCC      |L1.554|
00021a  4651              MOV      r1,r10                ;126
00021c  e002              B        |L1.548|
                  |L1.542|
00021e  f8262010          STRH     r2,[r6,r0,LSL #1]     ;182
000222  1c40              ADDS     r0,r0,#1              ;181
                  |L1.548|
000224  4288              CMP      r0,r1                 ;181
000226  d3fa              BCC      |L1.542|
000228  e002              B        |L1.560|
                  |L1.554|
00022a  1c40              ADDS     r0,r0,#1              ;175
00022c  4550              CMP      r0,r10                ;175
00022e  d3ec              BCC      |L1.522|
                  |L1.560|
000230  8830              LDRH     r0,[r6,#0]            ;187  ; ir
000232  4290              CMP      r0,r2                 ;187
000234  d071              BEQ      |L1.794|
000236  8870              LDRH     r0,[r6,#2]            ;187  ; ir
000238  4290              CMP      r0,r2                 ;187
00023a  d06e              BEQ      |L1.794|
00023c  88b0              LDRH     r0,[r6,#4]            ;187  ; ir
00023e  4290              CMP      r0,r2                 ;187
000240  d06b              BEQ      |L1.794|
000242  2404              MOVS     r4,#4                 ;189
000244  2500              MOVS     r5,#0                 ;189
                  |L1.582|
000246  496f              LDR      r1,|L1.1028|
000248  f8310014          LDRH     r0,[r1,r4,LSL #1]     ;191
00024c  f5a0427f          SUB      r2,r0,#0xff00         ;191
000250  3aff              SUBS     r2,r2,#0xff           ;191
000252  d03a              BEQ      |L1.714|
000254  2810              CMP      r0,#0x10              ;191
000256  d338              BCC      |L1.714|
000258  f7fffffe          BL       __aeabi_ui2d
00025c  4606              MOV      r6,r0                 ;193
00025e  460f              MOV      r7,r1                 ;193
000260  f04f3233          MOV      r2,#0x33333333        ;193
000264  4b8b              LDR      r3,|L1.1172|
000266  f7fffffe          BL       __aeabi_dmul
00026a  4632              MOV      r2,r6                 ;193
00026c  463b              MOV      r3,r7                 ;193
00026e  f7fffffe          BL       __aeabi_drsub
000272  4606              MOV      r6,r0                 ;193
000274  460f              MOV      r7,r1                 ;193
000276  f8390014          LDRH     r0,[r9,r4,LSL #1]     ;193
00027a  f7fffffe          BL       __aeabi_ui2d
00027e  4632              MOV      r2,r6                 ;193
000280  463b              MOV      r3,r7                 ;193
000282  f7fffffe          BL       __aeabi_cdrcmple
000286  d820              BHI      |L1.714|
000288  485e              LDR      r0,|L1.1028|
00028a  f8300014          LDRH     r0,[r0,r4,LSL #1]     ;193
00028e  f7fffffe          BL       __aeabi_ui2d
000292  4606              MOV      r6,r0                 ;193
000294  460f              MOV      r7,r1                 ;193
000296  f04f3233          MOV      r2,#0x33333333        ;193
00029a  4b7e              LDR      r3,|L1.1172|
00029c  f7fffffe          BL       __aeabi_dmul
0002a0  4632              MOV      r2,r6                 ;193
0002a2  463b              MOV      r3,r7                 ;193
0002a4  f7fffffe          BL       __aeabi_dadd
0002a8  e000              B        |L1.684|
                  |L1.682|
0002aa  e03d              B        |L1.808|
                  |L1.684|
0002ac  4606              MOV      r6,r0                 ;193
0002ae  460f              MOV      r7,r1                 ;193
0002b0  f8390014          LDRH     r0,[r9,r4,LSL #1]     ;193
0002b4  f7fffffe          BL       __aeabi_ui2d
0002b8  4632              MOV      r2,r6                 ;193
0002ba  463b              MOV      r3,r7                 ;193
0002bc  f7fffffe          BL       __aeabi_cdcmple
0002c0  d803              BHI      |L1.714|
0002c2  1c6d              ADDS     r5,r5,#1              ;194
0002c4  1c64              ADDS     r4,r4,#1              ;189
0002c6  4554              CMP      r4,r10                ;189
0002c8  d3bd              BCC      |L1.582|
                  |L1.714|
0002ca  465b              MOV      r3,r11                ;201
0002cc  462a              MOV      r2,r5                 ;201
0002ce  4641              MOV      r1,r8                 ;201
0002d0  a071              ADR      r0,|L1.1176|
0002d2  f7fffffe          BL       __2printf
0002d6  4856              LDR      r0,|L1.1072|
0002d8  f7fffffe          BL       fflush
0002dc  f1ab0005          SUB      r0,r11,#5             ;204
0002e0  4285              CMP      r5,r0                 ;204
0002e2  d321              BCC      |L1.808|
0002e4  300a              ADDS     r0,r0,#0xa            ;204
0002e6  4285              CMP      r5,r0                 ;204
0002e8  d81e              BHI      |L1.808|
0002ea  4641              MOV      r1,r8                 ;206
0002ec  a074              ADR      r0,|L1.1216|
0002ee  f7fffffe          BL       __2printf
0002f2  484f              LDR      r0,|L1.1072|
0002f4  f7fffffe          BL       fflush
0002f8  2000              MOVS     r0,#0                 ;208
0002fa  f7fffffe          BL       enable_timer
0002fe  f00800ff          AND      r0,r8,#0xff           ;210
000302  f7fffffe          BL       exe_scene
000306  4978              LDR      r1,|L1.1256|
000308  f44f70fa          MOV      r0,#0x1f4             ;211
00030c  6008              STR      r0,[r1,#0]            ;212  ; debounce_press
00030e  4977              LDR      r1,|L1.1260|
000310  0100              LSLS     r0,r0,#4              ;212
000312  6008              STR      r0,[r1,#0]            ;213  ; debounce_release
000314  2001              MOVS     r0,#1                 ;213
000316  e6f7              B        |L1.264|
000318  e7ff              B        |L1.794|
                  |L1.794|
00031a  4641              MOV      r1,r8                 ;218
00031c  a074              ADR      r0,|L1.1264|
00031e  f7fffffe          BL       __2printf
000322  4843              LDR      r0,|L1.1072|
000324  f7fffffe          BL       fflush
                  |L1.808|
000328  f1080001          ADD      r0,r8,#1              ;132
00032c  4680              MOV      r8,r0                 ;132
00032e  2804              CMP      r0,#4                 ;132
000330  f4ffaf20          BCC      |L1.372|
000334  a074              ADR      r0,|L1.1288|
000336  e6de              B        |L1.246|
;;;236    
                          ENDP

                  ext_task PROC
;;;239    *****************************************************************************/
;;;240    void ext_task(void)
000338  b570              PUSH     {r4-r6,lr}
;;;241    {
;;;242    	static char cnt_ext = 0;
;;;243    
;;;244    	/*LED para debug IR Receiver*/
;;;245    	if(!RECEIVE_IR())
00033a  4c35              LDR      r4,|L1.1040|
00033c  6d60              LDR      r0,[r4,#0x54]
00033e  0700              LSLS     r0,r0,#28
000340  d404              BMI      |L1.844|
;;;246    	{	
;;;247    		LED3_BOARD(1);
000342  6be0              LDR      r0,[r4,#0x3c]
000344  f4402080          ORR      r0,r0,#0x40000
000348  63e0              STR      r0,[r4,#0x3c]
00034a  e003              B        |L1.852|
                  |L1.844|
;;;248    	}else 
;;;249    	   	LED3_BOARD(0);
00034c  6ba0              LDR      r0,[r4,#0x38]
00034e  f4402080          ORR      r0,r0,#0x40000
000352  63a0              STR      r0,[r4,#0x38]
                  |L1.852|
;;;250    
;;;251    	if(!atoi(cfg.file.func_ir_scene))	/*Função IR Scene desabilitada?*/
000354  4874              LDR      r0,|L1.1320|
000356  f7fffffe          BL       atoi
;;;252    	{
;;;253    		/*Desabilita interrupção e contadores auxiliares*/
;;;254    		NVIC_DisableIRQ(EINT3_IRQn);
;;;255    		cnt_ext = 0;
00035a  4d74              LDR      r5,|L1.1324|
00035c  2600              MOVS     r6,#0
00035e  b198              CBZ      r0,|L1.904|
;;;256    		contEnableExtIr = 0;
;;;257    	 	return;
;;;258    	}
;;;259    
;;;260    	if(!flag_new_cmdir)	/*Ainda sem receber IR?*/
000360  7828              LDRB     r0,[r5,#0]  ; flag_new_cmdir
000362  b1b8              CBZ      r0,|L1.916|
;;;261    	{
;;;262    		if(contEnableExtIr >= 100)
;;;263    			NVIC_EnableIRQ(EINT3_IRQn);
;;;264    		cnt_ext = 0;	
;;;265    		return;
;;;266    	}
;;;267    
;;;268    	if(++cnt_ext >= 20)	
000364  7868              LDRB     r0,[r5,#1]  ; cnt_ext
000366  1c40              ADDS     r0,r0,#1
000368  b2c0              UXTB     r0,r0
00036a  7068              STRB     r0,[r5,#1]
00036c  2814              CMP      r0,#0x14
00036e  d310              BCC      |L1.914|
;;;269    	{
;;;270    		if(!RECEIVE_IR())
000370  6d60              LDR      r0,[r4,#0x54]
000372  0700              LSLS     r0,r0,#28
;;;271    		{ 	
;;;272    			NVIC_DisableIRQ(EINT3_IRQn);	/*Desabilita a interrupção responsavel por detectar que um IR xegou no pino*/
;;;273    			get_new_ir();					/*Chama função para lê o IR e verificar se ele de fato é um comando de cena*/
;;;274    			contEnableExtIr = 45;			/*Temporização para habilitar interrupção novamente*/
;;;275    		}else
;;;276    			NVIC_EnableIRQ(EINT3_IRQn);		/*Habilita novamente a interrupção*/
000374  f04f0015          MOV      r0,#0x15
000378  d414              BMI      |L1.932|
00037a  f7fffffe          BL       NVIC_DisableIRQ
00037e  f7fffffe          BL       get_new_ir
000382  202d              MOVS     r0,#0x2d              ;274
000384  6068              STR      r0,[r5,#4]            ;274  ; contEnableExtIr
000386  e00f              B        |L1.936|
                  |L1.904|
000388  2015              MOVS     r0,#0x15              ;254
00038a  f7fffffe          BL       NVIC_DisableIRQ
00038e  706e              STRB     r6,[r5,#1]            ;255
000390  606e              STR      r6,[r5,#4]            ;257  ; contEnableExtIr
                  |L1.914|
;;;277    		/*Reseta contador e flag para receber um novo IR como comando de cena*/
;;;278    		cnt_ext = 0;
;;;279    		flag_new_cmdir = __FALSE;					
;;;280    	}			
;;;281    }	
000392  bd70              POP      {r4-r6,pc}
                  |L1.916|
000394  6868              LDR      r0,[r5,#4]            ;262  ; contEnableExtIr
000396  2864              CMP      r0,#0x64              ;262
000398  db02              BLT      |L1.928|
00039a  2015              MOVS     r0,#0x15              ;263
00039c  f7fffffe          BL       NVIC_EnableIRQ
                  |L1.928|
0003a0  706e              STRB     r6,[r5,#1]            ;264
0003a2  bd70              POP      {r4-r6,pc}
                  |L1.932|
0003a4  f7fffffe          BL       NVIC_EnableIRQ
                  |L1.936|
0003a8  706e              STRB     r6,[r5,#1]            ;278
0003aa  702e              STRB     r6,[r5,#0]            ;279
0003ac  bd70              POP      {r4-r6,pc}
;;;282    /*****************************************************************************
                          ENDP

                  EINT0_IRQHandler PROC
;;;290    *****************************************************************************/
;;;291    void EINT0_IRQHandler (void) 
0003ae  4770              BX       lr
;;;292    {
;;;293    #if USE_EXT0
;;;294    	static U32 eint0_counter=0;
;;;295      	LPC_SC->EXTINT = EINT0;			/* clear interrupt */
;;;296    
;;;297        if(++eint0_counter & 0x01) 
;;;298            flag_new_ir = __TRUE;
;;;299    #endif
;;;300    }
;;;301    /*****************************************************************************
                          ENDP

                  EINT1_IRQHandler PROC
;;;309    *****************************************************************************/
;;;310    void EINT1_IRQHandler (void) 
0003b0  4770              BX       lr
;;;311    {
;;;312    #if USE_EXT1
;;;313      	LPC_SC->EXTINT |= EINT1;		/* clear interrupt */
;;;314    #endif
;;;315    }
;;;316    /*****************************************************************************
                          ENDP

                  EINT2_IRQHandler PROC
;;;324    *****************************************************************************/
;;;325    void EINT2_IRQHandler (void) 
0003b2  4770              BX       lr
;;;326    {
;;;327    #if USE_EXT2
;;;328      	LPC_SC->EXTINT |= EINT2;		/* clear interrupt */
;;;329    #endif
;;;330    }
;;;331    
                          ENDP

                  EINT3_IRQHandler PROC
;;;334     *---------------------------------------------------------------------------*/
;;;335    void EINT3_IRQHandler (void) 
0003b4  485e              LDR      r0,|L1.1328|
;;;336    {
;;;337    #if USE_EXT_ANY_GPIO2			
;;;338    	LPC_GPIOINT->IO2IntClr |= (1 << PIN_EXT_ANY_GPIO2);    /* Clear pending interrupt */
0003b6  6801              LDR      r1,[r0,#0]
0003b8  f0410108          ORR      r1,r1,#8
0003bc  6001              STR      r1,[r0,#0]
;;;339    	flag_new_cmdir = __TRUE;
0003be  495b              LDR      r1,|L1.1324|
0003c0  f04f0001          MOV      r0,#1
0003c4  7008              STRB     r0,[r1,#0]
;;;340    #endif
;;;341    
;;;342    #if USE_EXT_ANY_GPIO0 
;;;343       	LPC_GPIOINT->IO0IntClr |= (1 << PIN_EXT_ANY_GPIO0);    /* Clear pending interrupt */
;;;344    #endif
;;;345    	flag_new_cmdir = __TRUE;
;;;346    }
0003c6  4770              BX       lr
;;;347    /*****************************************************************************
                          ENDP

                  Init_EINT PROC
;;;357    *****************************************************************************/
;;;358    uint32_t Init_EINT (void)
0003c8  4811              LDR      r0,|L1.1040|
;;;359    {
0003ca  b510              PUSH     {r4,lr}
;;;360    #if USE_EXT0
;;;361    
;;;362    	LPC_PINCON->PINSEL4 	|= 0x00100000;	/* set P2.10 as EINT0 */										 
;;;363      	LPC_GPIOINT->IO2IntEnF 	|= 0x200;		/* Port2.10 is falling edge. */
;;;364      	LPC_SC->EXTMODE 		|= EINT0_EDGE;	/* INT0 edge trigger */
;;;365      	LPC_SC->EXTPOLAR = 0;					/* INT0 is falling edge by default */
;;;366      	NVIC_EnableIRQ(EINT0_IRQn);
;;;367    
;;;368    #endif
;;;369    #if USE_EXT1
;;;370    	
;;;371    	LPC_PINCON->PINSEL4 	|= 0x00400000;	/* set P2.11 as EINT1 */
;;;372    	LPC_GPIOINT->IO2IntEnF 	|= 0x400;		/* Port2.11 is falling edge. */
;;;373    	LPC_SC->EXTMODE 		|= EINT1_EDGE;	/* INT1 edge trigger */
;;;374      	LPC_SC->EXTPOLAR = 0;					/* INT1 is falling edge by default */
;;;375      	NVIC_EnableIRQ(EINT1_IRQn);				/* INT1 edge trigger */
;;;376    
;;;377    #endif
;;;378    #if USE_EXT2
;;;379    
;;;380    	LPC_PINCON->PINSEL4 	|= 0x01000000;	/* set P2.12 as EINT2 */
;;;381    	LPC_GPIOINT->IO2IntEnF 	|= 0x800;		/* Port2.12 is falling edge. */
;;;382    	LPC_SC->EXTMODE 		|= EINT2_EDGE;	/* INT2 edge trigger */
;;;383      	LPC_SC->EXTPOLAR = 0;					/* INT2 is falling edge by default */
;;;384      	NVIC_EnableIRQ(EINT2_IRQn);				/* INT2 edge trigger */
;;;385    
;;;386    #endif
;;;387    #if USE_EXT_ANY_GPIO2 
;;;388    
;;;389       /*Seta o pino qualquer da porta 2 que funcionará como interrupção EINT3*/
;;;390    	LPC_GPIO2->FIODIR &= ~(1<<PIN_EXT_ANY_GPIO2);        	/* Pin as input */
0003cc  6c01              LDR      r1,[r0,#0x40]
0003ce  f0210108          BIC      r1,r1,#8
0003d2  6401              STR      r1,[r0,#0x40]
0003d4  4857              LDR      r0,|L1.1332|
;;;391    	LPC_GPIOINT->IO2IntEnF |= (1<<PIN_EXT_ANY_GPIO2);      /* Enable falling edge IRQ pin chosen */
0003d6  6801              LDR      r1,[r0,#0]
0003d8  f0410108          ORR      r1,r1,#8
0003dc  6001              STR      r1,[r0,#0]
;;;392    	NVIC_EnableIRQ(EINT3_IRQn);             /* enable irq in nvic */
0003de  f04f0015          MOV      r0,#0x15
0003e2  f7fffffe          BL       NVIC_EnableIRQ
;;;393    #endif 
;;;394    #if USE_EXT_ANY_GPIO0 
;;;395    
;;;396       /*Seta o pino qualquer da porta 0 que funcionará como interrupção EINT3*/
;;;397    	LPC_GPIO0->FIODIR &= ~(1<<PIN_EXT_ANY_GPIO0);        	/* Pin as input */
;;;398    	LPC_GPIOINT->IO0IntEnF |= (1<<PIN_EXT_ANY_GPIO0);      /* Enable falling edge IRQ pin chosen */
;;;399    	NVIC_EnableIRQ(EINT3_IRQn);             /* enable irq in nvic */
;;;400    
;;;401    #endif
;;;402      	return 1;
0003e6  2001              MOVS     r0,#1
;;;403    }
0003e8  bd10              POP      {r4,pc}
;;;404    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
0003ea  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
0003ee  2101              MOVS     r1,#1
0003f0  4091              LSLS     r1,r1,r2
0003f2  0940              LSRS     r0,r0,#5
0003f4  f04f22e0          MOV      r2,#0xe000e000
0003f8  eb020080          ADD      r0,r2,r0,LSL #2
0003fc  f8c01100          STR      r1,[r0,#0x100]
                  |L1.1024|
;;;1099   }
000400  4770              BX       lr
000402  0000              DCW      0x0000
                  |L1.1028|
                          DCD      ||ir||
                  |L1.1032|
                          DCD      ir_counter
                  |L1.1036|
                          DCD      0x40008000
                  |L1.1040|
                          DCD      0x2009c000
                  |L1.1044|
                          DCD      0x0001d4c0
                  |L1.1048|
000418  5b457272          DCB      "[Error CMD IR Scene]\r",0
00041c  6f722043
000420  4d442049
000424  52205363
000428  656e655d
00042c  0d00    
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
                          DCD      __stdout
                  |L1.1076|
000434  2a2a2a2a          DCB      "*****\r[IR Receiver...All Pulses:%u]\r",0
000438  2a0d5b49
00043c  52205265
000440  63656976
000444  65722e2e
000448  2e416c6c
00044c  2050756c
000450  7365733a
000454  25755d0d
000458  00      
000459  00                DCB      0
00045a  00                DCB      0
00045b  00                DCB      0
                  |L1.1116|
                          DCD      ir_cmp
                  |L1.1120|
000460  5b4c696d          DCB      "[Limited to 70 pulses]\r",0
000464  69746564
000468  20746f20
00046c  37302070
000470  756c7365
000474  735d0d00
                  |L1.1144|
000478  434d4449          DCB      "CMDIR\\IR_",0
00047c  525c4952
000480  5f00    
000482  00                DCB      0
000483  00                DCB      0
                  |L1.1156|
000484  25732575          DCB      "%s%u.TXT",0
000488  2e545854
00048c  00      
00048d  00                DCB      0
00048e  00                DCB      0
00048f  00                DCB      0
                  |L1.1168|
000490  7200              DCB      "r",0
000492  00                DCB      0
000493  00                DCB      0
                  |L1.1172|
                          DCD      0x3fd33333
                  |L1.1176|
000498  5b495220          DCB      "[IR %u (SD)...Acertos:%u...Pulsos:%u]\r",0
00049c  25752028
0004a0  5344292e
0004a4  2e2e4163
0004a8  6572746f
0004ac  733a2575
0004b0  2e2e2e50
0004b4  756c736f
0004b8  733a2575
0004bc  5d0d00  
0004bf  00                DCB      0
                  |L1.1216|
0004c0  5b495220          DCB      "[IR Scene found...Scene %u Run]\r*****\r\r",0
0004c4  5363656e
0004c8  6520666f
0004cc  756e642e
0004d0  2e2e5363
0004d4  656e6520
0004d8  25752052
0004dc  756e5d0d
0004e0  2a2a2a2a
0004e4  2a0d0d00
                  |L1.1256|
                          DCD      debounce_press
                  |L1.1260|
                          DCD      debounce_release
                  |L1.1264|
0004f0  5b495220          DCB      "[IR %u (SD) not found]\r",0
0004f4  25752028
0004f8  53442920
0004fc  6e6f7420
000500  666f756e
000504  645d0d00
                  |L1.1288|
000508  5b495220          DCB      "[IR Scene not found]\r*****\r\r",0
00050c  5363656e
000510  65206e6f
000514  7420666f
000518  756e645d
00051c  0d2a2a2a
000520  2a2a0d0d
000524  00      
000525  00                DCB      0
000526  00                DCB      0
000527  00                DCB      0
                  |L1.1320|
                          DCD      ||cfg||+0x8b
                  |L1.1324|
                          DCD      ||.data||
                  |L1.1328|
                          DCD      0x400280ac
                  |L1.1332|
                          DCD      0x400280b4
                          ENDP

                  NVIC_DisableIRQ PROC
;;;1109    */
;;;1110   static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000538  f000021f          AND      r2,r0,#0x1f
;;;1111   {
;;;1112     NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
00053c  2101              MOVS     r1,#1
00053e  4091              LSLS     r1,r1,r2
000540  0940              LSRS     r0,r0,#5
000542  f04f22e0          MOV      r2,#0xe000e000
000546  eb020080          ADD      r0,r2,r0,LSL #2
00054a  f8c01180          STR      r1,[r0,#0x180]
;;;1113   }
00054e  e757              B        |L1.1024|
;;;1114   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  flag_new_cmdir
000000  00                DCB      0x00
                  cnt_ext
000001  000000            DCB      0x00,0x00,0x00
                  contEnableExtIr
                          DCD      0x00000000
