; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\out\file_config.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\file_config.d --cpu=Cortex-M3 --apcs=interwork -I.\inc -I.\inc\file_system -I.\inc\IR -IC:\Keil\ARM\RL\TCPnet\Drivers -I.\inc\tcpip -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -DLPC1700 -DFLASH_512 --omf_browse=.\out\file_config.crf src\file_system\File_Config.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mc0_Init PROC
;;;178      /* MC0 wrapper functions */
;;;179      static BOOL mc0_Init (U32 mode) {
000000  491f              LDR      r1,|L1.128|
;;;180        return (MC0_INIT (mode));
000002  f7ffbffe          B.W      mmc_Init
;;;181      }
;;;182      static BOOL mc0_UnInit (U32 mode) {
                          ENDP

                  mc0_UnInit PROC
000006  491e              LDR      r1,|L1.128|
;;;183        return (MC0_UNINIT (mode));
000008  f7ffbffe          B.W      mmc_UnInit
;;;184      }
;;;185      static BOOL mc0_RdSect (U32 sect, U8 *buf, U32 cnt) {
                          ENDP

                  mc0_RdSect PROC
00000c  4b1c              LDR      r3,|L1.128|
;;;186        return (MC0_RDSEC (sect, buf, cnt));
00000e  f7ffbffe          B.W      mmc_ReadSector
;;;187      }
;;;188      static BOOL mc0_WrSect (U32 sect, U8 *buf, U32 cnt) {
                          ENDP

                  mc0_WrSect PROC
000012  4b1b              LDR      r3,|L1.128|
;;;189        return (MC0_WRSEC (sect, buf, cnt));
000014  f7ffbffe          B.W      mmc_WriteSector
;;;190      }
;;;191      static BOOL mc0_RdInfo (Media_INFO *info) {
                          ENDP

                  mc0_RdInfo PROC
000018  4919              LDR      r1,|L1.128|
;;;192        return (MC0_RDINFO (info));
00001a  f7ffbffe          B.W      mmc_ReadInfo
;;;193      }
;;;194      static U32 mc0_ChkMedia (void) {
                          ENDP

                  mc0_ChkMedia PROC
00001e  4819              LDR      r0,|L1.132|
;;;195        if (!MC0_CHKMEDIA) return (M_INSERTED);
000020  69c1              LDR      r1,[r0,#0x1c]  ; spi0_drv
000022  b101              CBZ      r1,|L1.38|
;;;196        return (MC0_CHKMEDIA());
000024  4708              BX       r1
                  |L1.38|
000026  2001              MOVS     r0,#1                 ;195
;;;197      }
000028  4770              BX       lr
;;;198    
                          ENDP

                  fs_config PROC
;;;423     *---------------------------------------------------------------------------*/
;;;424    void fs_config (void) {
00002a  4817              LDR      r0,|L1.136|
;;;425    
;;;426    #if (FL0_EN)
;;;427      fl0_vol.BaseAdr = FL0_BADR;
;;;428      fl0_vol.InitVal = (U32)0x1010101 * FL0_INITV; 
;;;429      fl0_vol.NumSect = sizeof(fl0_cfg)/sizeof(EFS_CFG);
;;;430      fl0_vol.Size    = FL0_SIZE;
;;;431      fl0_vol.DevCfg  = fl0_cfg;
;;;432      fl0_vol.drv     = &fl0_drv;
;;;433      fl0_vol.CpuClk  = CPU_CLK;
;;;434    #endif
;;;435    
;;;436    #if (SF0_EN)
;;;437      sf0_vol.BaseAdr = 0;
;;;438      sf0_vol.InitVal = (U32)0x1010101 * SF0_INITV; 
;;;439      sf0_vol.NumSect = sizeof(sf0_cfg)/sizeof(EFS_CFG);
;;;440      sf0_vol.Size    = SF0_SIZE;
;;;441      sf0_vol.DevCfg  = sf0_cfg;
;;;442      sf0_vol.drv     = &sf0_drv;
;;;443      sf0_vol.CpuClk  = CPU_CLK;
;;;444    #endif
;;;445    
;;;446    #if (RAM0_EN)
;;;447      ram0_vol.BaseAdr= (U32)ram0_buf;
;;;448      ram0_vol.InitVal= 0;
;;;449      ram0_vol.NumSect= RAM0_NSECT;
;;;450      ram0_vol.Size   = RAM0_SIZE;
;;;451      ram0_vol.DevCfg = ram0_cfg;
;;;452      ram0_vol.drv    = NULL;
;;;453    #endif
;;;454    
;;;455    #if (MC0_EN)
;;;456      mc0_vol.CaSize  = MC0_CASZ * 2;
00002c  2104              MOVS     r1,#4
;;;457      mc0_vol.CaBuf   = mc0_cache;
00002e  60c1              STR      r1,[r0,#0xc]  ; mc0_vol
000030  f5a06140          SUB      r1,r0,#0xc00
;;;458      mc0_vol.drv     = &mc0_drv;
000034  6081              STR      r1,[r0,#8]  ; mc0_vol
000036  4915              LDR      r1,|L1.140|
;;;459     #if (MC0_SPI == 0)
;;;460      /* Register MCI driver for SD-Native mode */
;;;461      mci0_dev.drv    = &mci0_drv;
;;;462     #else
;;;463      /* Register SPI driver for SPI mode */
;;;464      mmc0_dev.spi    = &spi0_drv;
000038  6041              STR      r1,[r0,#4]  ; mc0_vol
00003a  4911              LDR      r1,|L1.128|
00003c  4811              LDR      r0,|L1.132|
00003e  6088              STR      r0,[r1,#8]  ; mmc0_dev
;;;465     #endif
;;;466    #endif  
;;;467    
;;;468    #if (MC1_EN)
;;;469      mc1_vol.CaSize  = MC1_CASZ * 2;
;;;470      mc1_vol.CaBuf   = mc1_cache;
;;;471      mc1_vol.drv     = &mc1_drv;
;;;472     #if (MC1_SPI == 0)
;;;473      /* Register MCI driver for SD-Native mode */
;;;474      mci1_dev.drv    = &mci1_drv;
;;;475     #else
;;;476      /* Register SPI driver for SPI mode */
;;;477      mmc1_dev.spi    = &spi1_drv;
;;;478     #endif
;;;479    #endif  
;;;480    
;;;481    #if (USB0_EN)
;;;482      usb0_vol.CaSize = USB0_CASZ * 2;
;;;483      usb0_vol.CaBuf  = usb0_cache;
;;;484      usb0_vol.drv    = &usb0_drv;
;;;485    #endif  
;;;486    
;;;487    #if (USB1_EN)
;;;488      usb1_vol.CaSize = USB1_CASZ * 2;
;;;489      usb1_vol.CaBuf  = usb1_cache;
;;;490      usb1_vol.drv    = &usb1_drv;
;;;491    #endif  
;;;492    
;;;493    #if (NAND0_EN)
;;;494      nand0_vol.CaSize= NAND0_CASZ * 2;
;;;495      nand0_vol.CaBuf = nand0_cache;
;;;496      nand0_vol.drv   = &nfat0_drv;
;;;497      nand0_dev.Cfg   = &nand0_cfg;
;;;498      nand0_dev.Drv   = &nand0_drv;
;;;499    #endif  
;;;500    }
000040  4770              BX       lr
;;;501    
                          ENDP

                  efs_rename PROC
;;;503     /* Empty functions to reduce image size when EFS not used */
;;;504     BOOL efs_rename (const char *filename, IOB *fcb) { return (__FALSE); }
000042  2000              MOVS     r0,#0
000044  4770              BX       lr
;;;505     BOOL efs_create (const char *fname, IOB *fcb)    { return (__FALSE); }
                          ENDP

                  efs_create PROC
000046  2000              MOVS     r0,#0
000048  4770              BX       lr
;;;506     BOOL efs_delete (IOB *fcb)                       { return (__FALSE); }
                          ENDP

                  efs_delete PROC
00004a  2000              MOVS     r0,#0
00004c  4770              BX       lr
;;;507     U32  efs_free (EFS_VI *vi)                       { return (0); }
                          ENDP

                  efs_free PROC
00004e  2000              MOVS     r0,#0
000050  4770              BX       lr
;;;508     BOOL efs_format (EFS_VI *vi)                     { return (__FALSE); }
                          ENDP

                  efs_format PROC
000052  2000              MOVS     r0,#0
000054  4770              BX       lr
;;;509     BOOL efs_ffind (FINFO *info, IOB *fcb)           { return (__FALSE); }
                          ENDP

                  efs_ffind PROC
000056  2000              MOVS     r0,#0
000058  4770              BX       lr
;;;510     BOOL efs_wclose (IOB *fcb)                       { return (__FALSE); }
                          ENDP

                  efs_wclose PROC
00005a  2000              MOVS     r0,#0
00005c  4770              BX       lr
;;;511     U32  efs_read (IOB *fcb, U8 *buf, U32 len)       { return (0); }
                          ENDP

                  efs_read PROC
00005e  2000              MOVS     r0,#0
000060  4770              BX       lr
;;;512     BOOL efs_write (IOB *fcb, const U8 *buf, U32 len){ return (__FALSE); }
                          ENDP

                  efs_write PROC
000062  2000              MOVS     r0,#0
000064  4770              BX       lr
;;;513     BOOL efs_ensure (IOB *fcb)                       { return (__FALSE); }
                          ENDP

                  efs_ensure PROC
000066  2000              MOVS     r0,#0
000068  4770              BX       lr
;;;514     BOOL efs_seek (IOB *fcb, U32 pos)                { return (__FALSE); }
                          ENDP

                  efs_seek PROC
00006a  2000              MOVS     r0,#0
00006c  4770              BX       lr
;;;515     void efs_fsize (IOB *fcb)                        { ; }
                          ENDP

                  efs_fsize PROC
00006e  4770              BX       lr
;;;516     BOOL efs_find (const char *name, IOB *fcb)       { return (__FALSE); }
                          ENDP

                  efs_find PROC
000070  2000              MOVS     r0,#0
000072  4770              BX       lr
;;;517     int  efs_analyse (EFS_VI *vi)                    { return (0); }
                          ENDP

                  efs_analyse PROC
000074  2000              MOVS     r0,#0
000076  4770              BX       lr
;;;518     BOOL efs_check (EFS_VI *vi)                      { return (__FALSE); }
                          ENDP

                  efs_check PROC
000078  2000              MOVS     r0,#0
00007a  4770              BX       lr
;;;519     BOOL efs_defrag (IOB *fcb)                       { return (__FALSE); }
                          ENDP

                  efs_defrag PROC
00007c  2000              MOVS     r0,#0
00007e  4770              BX       lr
;;;520    #endif
                          ENDP

                  |L1.128|
                          DCD      ||area_number.4||+0xd78
                  |L1.132|
                          DCD      spi0_drv
                  |L1.136|
                          DCD      ||area_number.4||+0xc00
                  |L1.140|
                          DCD      ||area_number.8||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  _iob
                          %        256

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.bss||
                  mc0_cache
                          %        3072
                  mc0_vol
                          %        376
                  mmc0_dev
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  _NFILE
000000  0008              DCW      0x0008

                          AREA ||area_number.7||, DATA, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.constdata||
                  _NDRV
000000  0001              DCW      0x0001

                          AREA ||area_number.8||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.constdata||
                  mc0_drv
                          DCD      mc0_Init
                          DCD      mc0_UnInit
                          DCD      mc0_RdSect
                          DCD      mc0_WrSect
                          DCD      mc0_RdInfo
                          DCD      mc0_ChkMedia

                          AREA ||area_number.9||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.constdata||
                  fs_DevPool
                          DCD      mc0_vol
000004  4d30000d          DCB      0x4d,0x30,0x00,0x0d
