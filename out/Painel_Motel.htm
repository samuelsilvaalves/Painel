<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\Painel_Motel.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\Painel_Motel.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Wed Oct 01 10:34:43 2014
<BR><P>
<H3>Maximum Stack Usage =       5944 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
udp_callback &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[176]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[13]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PendSV_Handler</a><BR>
 <LI><a href="#[14]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">SysTick_Handler</a><BR>
 <LI><a href="#[2b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC_IRQHandler</a><BR>
 <LI><a href="#[96]">sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">sys_error</a><BR>
 <LI><a href="#[12c]">mem_test</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12c]">mem_test</a><BR>
 <LI><a href="#[1f6]">str_up_case</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f6]">str_up_case</a><BR>
 <LI><a href="#[8e]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[65]">BusSpeed</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[37]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[67]">CheckMedia</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">EINT0_IRQHandler</a> from extint.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">EINT1_IRQHandler</a> from extint.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">EINT2_IRQHandler</a> from extint.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">EINT3_IRQHandler</a> from extint.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">ENET_IRQHandler</a> from emac_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[60]">Init</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[33]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PWM1_IRQHandler</a> from pwm_ir.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[64]">RecBuf</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[b]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[62]">Send</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[63]">SendBuf</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[66]">SetSS</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[14]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">UART2_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[61]">UnInit</a> from spi_lpc17xx.o(.text) referenced from spi_lpc17xx.o(.constdata)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[68]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[3c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3b]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3f]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3a]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[39]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[4f]">cmd_ar_swing</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[56]">cmd_detect_swing</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[59]">cmd_disable_touch</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[55]">cmd_ena_dis_func</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[58]">cmd_enable_touch</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[47]">cmd_ir_erase</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[48]">cmd_ir_erase_all</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[45]">cmd_ir_learn</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[52]">cmd_ir_learn_app</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[49]">cmd_ir_read</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[46]">cmd_ir_send</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[53]">cmd_ir_send_app</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[51]">cmd_irl_scene</a> from cmds_ir.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[4e]">cmd_msg_dimmer</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[4b]">cmd_rcv_touch</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[54]">cmd_rel</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[4a]">cmd_reset_board</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[4d]">cmd_run_scene</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[4c]">cmd_scene</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[50]">cmd_set_real_time</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[57]">cmd_type_dim</a> from uart.o(.text) referenced from uart.o(.constdata)
 <LI><a href="#[41]">dhcp_listener</a> from at_dhcp.o(i.dhcp_listener) referenced from at_dhcp.o(i.init_dhcp)
 <LI><a href="#[3e]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[43]">ftp_data_cb</a> from at_ftp.o(i.ftp_data_cb) referenced from at_ftp.o(i.init_ftp)
 <LI><a href="#[42]">ftp_listener</a> from at_ftp.o(i.ftp_listener) referenced from at_ftp.o(i.init_ftp)
 <LI><a href="#[40]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5f]">mc0_ChkMedia</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[5a]">mc0_Init</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[5e]">mc0_RdInfo</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[5c]">mc0_RdSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[5b]">mc0_UnInit</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[5d]">mc0_WrSect</a> from file_config.o(.text) referenced from file_config.o(.constdata)
 <LI><a href="#[44]">nbns_listener</a> from at_nbns.o(i.nbns_listener) referenced from at_nbns.o(i.init_nbns)
 <LI><a href="#[134]">tcp_callback_client</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[135]">tcp_callback_server</a> from tcpip.o(.text) referenced from tcpip.o(.text)
 <LI><a href="#[12e]">udp_callback</a> from tcpip.o(.text) referenced from tcpip.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[69]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[217]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[218]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[219]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6d]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[14a]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6f]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[71]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[73]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[74]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[76]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[78]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[21a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[21b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[21c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[80]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[21f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[220]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[221]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[222]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[223]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[224]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[225]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[226]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[227]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[81]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000020))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[228]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[229]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[22e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[230]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[231]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[232]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[233]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[6a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[234]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[85]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[87]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[235]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[88]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; file_task &rArr; read_cfg_tcp &rArr; fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[236]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[178]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[237]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[238]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1db]"></a>fs_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
</UL>

<P><STRONG><a name="[1da]"></a>efs_rename</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[189]"></a>efs_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[188]"></a>efs_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[239]"></a>efs_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>efs_format</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>efs_ffind</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[17f]"></a>efs_wclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[18b]"></a>efs_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[18f]"></a>efs_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[180]"></a>efs_ensure</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[18d]"></a>efs_seek</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[181]"></a>efs_fsize</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[187]"></a>efs_find</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[23b]"></a>efs_analyse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>efs_check</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>efs_defrag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, file_config.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>control_ir_task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, control_ir.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>

<P><STRONG><a name="[97]"></a>init_system</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = init_system &rArr; init_eth_link &rArr; init_ethernet &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nbns
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ftp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[9e]"></a>run_system</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = run_system &rArr; run_ftp_server &rArr; ftp_fopen &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
</UL>

<P><STRONG><a name="[a3]"></a>process_hl_udp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_hl_udp &rArr; process_udp
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a5]"></a>process_hl_tcp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a7]"></a>dispatch_frame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[a9]"></a>arp_notify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_notify &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>

<P><STRONG><a name="[1ee]"></a>igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[23e]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
</UL>

<P><STRONG><a name="[240]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>SystemInit</STRONG> (Thumb, 504 bytes, Stack size 20 bytes, system_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>verify_last_reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = verify_last_reset &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>main</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = main &rArr; file_task &rArr; read_cfg_tcp &rArr; fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_poll
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_scene
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_register
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_msd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_task
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ir_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EINT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_last_reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e4]"></a>get_entry</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
</UL>

<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART2_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>init_uart</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>uart_putChar</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
</UL>

<P><STRONG><a name="[fb]"></a>uart_getChar</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[241]"></a>uart_getChar_nb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>uart_putString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_putString
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rel
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_run_scene
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_real_time
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_scene
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
</UL>

<P><STRONG><a name="[4a]"></a>cmd_reset_board</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>cmd_ar_swing</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5672 + Unknown Stack Size
<LI>Call Chain = cmd_ar_swing &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>cmd_detect_swing</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = cmd_detect_swing &rArr; cmd_ir_learn_app &rArr; learn_ir &rArr; save_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_learn_app
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>cmd_type_dim</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5696 + Unknown Stack Size
<LI>Call Chain = cmd_type_dim &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>ena_dis_touch</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5680 + Unknown Stack Size
<LI>Call Chain = ena_dis_touch &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_disable_touch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enable_touch
</UL>

<P><STRONG><a name="[58]"></a>cmd_enable_touch</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5696 + Unknown Stack Size
<LI>Call Chain = cmd_enable_touch &rArr; ena_dis_touch &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ena_dis_touch
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>cmd_disable_touch</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5688 + Unknown Stack Size
<LI>Call Chain = cmd_disable_touch &rArr; ena_dis_touch &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ena_dis_touch
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>cmd_set_real_time</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cmd_set_real_time &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>repeat_IR</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = repeat_IR &rArr; cmd_ir_send &rArr; send_ir &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_poll
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
</UL>

<P><STRONG><a name="[4b]"></a>cmd_rcv_touch</STRONG> (Thumb, 1206 bytes, Stack size 96 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = cmd_rcv_touch &rArr; repeat_IR &rArr; cmd_ir_send &rArr; send_ir &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atualiza_saidas
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>cmd_scene</STRONG> (Thumb, 920 bytes, Stack size 56 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = cmd_scene &rArr; init_scene &rArr; read_scene &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>cmd_run_scene</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cmd_run_scene &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>cmd_ena_dis_func</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5672 + Unknown Stack Size
<LI>Call Chain = cmd_ena_dis_func &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>cmd_rel</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = cmd_rel &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>cmd_msg_dimmer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cmd_msg_dimmer &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>cmd_task</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = cmd_task &rArr; tcpSend &rArr; tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_entry
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>timer_poll</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[242]"></a>delayMs</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TIMER0_IRQHandler &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atualiza_saidas
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>reset_timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
</UL>

<P><STRONG><a name="[e9]"></a>enable_timer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[eb]"></a>disable_timer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
</UL>

<P><STRONG><a name="[b9]"></a>init_timer</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_timer &rArr; enable_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>get_new_ir</STRONG> (Thumb, 824 bytes, Stack size 104 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = get_new_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_task
</UL>

<P><STRONG><a name="[c5]"></a>ext_task</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ext_task &rArr; get_new_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>EINT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, extint.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, extint.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, extint.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, extint.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>Init_EINT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, extint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init_EINT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>init_msd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = init_msd &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>fread_line</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
</UL>

<P><STRONG><a name="[f6]"></a>read_file_cfg</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = read_file_cfg &rArr; fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread_line
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
</UL>

<P><STRONG><a name="[f7]"></a>read_cfg_tcp</STRONG> (Thumb, 1268 bytes, Stack size 72 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = read_cfg_tcp &rArr; fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread_line
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
</UL>

<P><STRONG><a name="[b4]"></a>init_file</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = init_file &rArr; read_cfg_tcp &rArr; fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>file_task</STRONG> (Thumb, 1212 bytes, Stack size 392 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = file_task &rArr; read_cfg_tcp &rArr; fread_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_msd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>fwrite_line</STRONG> (Thumb, 384 bytes, Stack size 5232 bytes, msd_sd_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5656 + Unknown Stack Size
<LI>Call Chain = fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ena_dis_func
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ena_dis_touch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ar_swing
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>

<P><STRONG><a name="[f9]"></a>sendchar</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putChar
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[fa]"></a>getkey</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getChar
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[fc]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[fd]"></a>_sys_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[ff]"></a>_sys_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _sys_close &rArr; __sys_close &rArr; fat_wclose &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[101]"></a>_sys_write</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[103]"></a>_sys_read</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _sys_read &rArr; __sys_read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[168]"></a>_sys_istty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[105]"></a>_sys_seek</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _sys_seek &rArr; __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[107]"></a>_sys_ensure</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_ensure
</UL>

<P><STRONG><a name="[109]"></a>_sys_flen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen &rArr; __sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[243]"></a>_sys_tmpnam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[10b]"></a>save_ir</STRONG> (Thumb, 238 bytes, Stack size 104 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = save_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
</UL>

<P><STRONG><a name="[10c]"></a>read_ir</STRONG> (Thumb, 284 bytes, Stack size 80 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_read
</UL>

<P><STRONG><a name="[10d]"></a>erase_all_ir</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = erase_all_ir &rArr; fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_erase_all
</UL>

<P><STRONG><a name="[10f]"></a>erase_ir</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = erase_ir &rArr; fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_erase
</UL>

<P><STRONG><a name="[110]"></a>send_ir</STRONG> (Thumb, 824 bytes, Stack size 88 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = send_ir &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Stop
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send_app
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send
</UL>

<P><STRONG><a name="[114]"></a>learn_ir</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = learn_ir &rArr; save_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_irl_scene
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_learn_app
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_learn
</UL>

<P><STRONG><a name="[112]"></a>PWM_Set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pwm_ir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[1e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, pwm_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>PWM_Init</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, pwm_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>PWM_Start</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, pwm_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
</UL>

<P><STRONG><a name="[95]"></a>PWM_Stop</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, pwm_ir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ir_task
</UL>

<P><STRONG><a name="[115]"></a>get_addr_channel</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_addr_channel &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_irl_scene
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_learn
</UL>

<P><STRONG><a name="[45]"></a>cmd_ir_learn</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = cmd_ir_learn &rArr; learn_ir &rArr; save_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr_channel
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>cmd_irl_scene</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = cmd_irl_scene &rArr; learn_ir &rArr; save_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr_channel
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>cmd_ir_learn_app</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = cmd_ir_learn_app &rArr; learn_ir &rArr; save_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>cmd_ir_send_app</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = cmd_ir_send_app &rArr; send_ir &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>cmd_ir_send</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = cmd_ir_send &rArr; send_ir &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>cmd_ir_erase</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = cmd_ir_erase &rArr; erase_ir &rArr; fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>cmd_ir_erase_all</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = cmd_ir_erase_all &rArr; erase_all_ir &rArr; fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>cmd_ir_read</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cmds_ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = cmd_ir_read &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>save_scene</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = save_scene &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
</UL>

<P><STRONG><a name="[e0]"></a>read_scene</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = read_scene &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
</UL>

<P><STRONG><a name="[dd]"></a>beep</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = beep
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_task
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
</UL>

<P><STRONG><a name="[f1]"></a>exe_scene</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = exe_scene &rArr; tcpSend &rArr; tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_scene
</UL>

<P><STRONG><a name="[bc]"></a>show_all_scene</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = show_all_scene &rArr; exe_scene &rArr; tcpSend &rArr; tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>init_scene</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = init_scene &rArr; read_scene &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>init_touch</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>read_touch</STRONG> (Thumb, 522 bytes, Stack size 8 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_touch
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
</UL>

<P><STRONG><a name="[bf]"></a>touch_task</STRONG> (Thumb, 618 bytes, Stack size 152 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = touch_task &rArr; cmd_ir_send &rArr; send_ir &rArr; read_ir &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_touch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atualiza_saidas
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putString
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>key_task</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = key_task &rArr; beep
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>atualiza_saidas</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, register.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atualiza_saidas
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_task
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_register
</UL>

<P><STRONG><a name="[b2]"></a>init_register</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, register.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_register &rArr; atualiza_saidas
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atualiza_saidas
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>led_task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, register.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_task &rArr; atualiza_saidas
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atualiza_saidas
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>init_ethernet</STRONG> (Thumb, 578 bytes, Stack size 40 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = init_ethernet &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[191]"></a>int_enable_eth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[190]"></a>int_disable_eth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[1a8]"></a>send_frame</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>

<P><STRONG><a name="[31]"></a>ENET_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENET_IRQHandler &rArr; put_in_queue &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>ftp_fopen</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ftp_fopen &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[120]"></a>ftp_fclose</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ftp_fclose &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file
</UL>

<P><STRONG><a name="[121]"></a>ftp_fread</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ftp_fread &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[123]"></a>ftp_fwrite</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ftp_fwrite &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_data_cb
</UL>

<P><STRONG><a name="[125]"></a>ftp_fdelete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ftp_fdelete &rArr; fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[126]"></a>ftp_frename</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ftp_frename &rArr; frename &rArr; fat_rename &rArr; rename_entries &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
</UL>

<P><STRONG><a name="[128]"></a>ftp_ffind</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, ftp_uif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = ftp_ffind &rArr; ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[12a]"></a>inet_aton</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = inet_aton &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendUnicast
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[12b]"></a>dhcp_check</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = dhcp_check &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[12e]"></a>udp_callback</STRONG> (Thumb, 1576 bytes, Stack size 288 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5944 + Unknown Stack Size
<LI>Call Chain = udp_callback &rArr; fwrite_line &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>tcp_callback</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = tcp_callback &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback_server
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback_client
</UL>

<P><STRONG><a name="[134]"></a>tcp_callback_client</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_callback_client &rArr; tcp_callback &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>tcp_callback_server</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = tcp_callback_server &rArr; tcp_callback &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>user_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = user_init &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>udpSendBroadcast</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = udpSendBroadcast &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
</UL>

<P><STRONG><a name="[13b]"></a>udpSendUnicast</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, tcpip.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[e6]"></a>tcpSend</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tcpSend &rArr; tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_check_send
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
</UL>

<P><STRONG><a name="[c4]"></a>tcp_task</STRONG> (Thumb, 888 bytes, Stack size 216 bytes, tcpip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tcp_task &rArr; init_scene &rArr; read_scene &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBroadcast
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
</UL>

<P><STRONG><a name="[ae]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_msd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_last_reset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[f8]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
</UL>

<P><STRONG><a name="[cc]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_ir
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_ir
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_irl_scene
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send_app
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_learn_app
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_learn
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_erase_all
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_msg_dimmer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rel
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ena_dis_func
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_run_scene
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_real_time
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_disable_touch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enable_touch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ena_dis_touch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ar_swing
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_scene
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_ffind
</UL>

<P><STRONG><a name="[144]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[145]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[143]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[72]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6e]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[147]"></a>_printf_longlong_hex</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[70]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[148]"></a>__printf</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[14b]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
</UL>

<P><STRONG><a name="[14d]"></a>_scanf_int</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[ca]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr_channel
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_send
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_read
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_erase
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ena_dis_func
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_run_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_disable_touch
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enable_touch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ar_swing
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_all_scene
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_task
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendUnicast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBroadcast
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>

<P><STRONG><a name="[151]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[af]"></a>fflush</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ir_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rel
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_msd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_file
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_last_reset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[154]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[ee]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fopen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread_line
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
</UL>

<P><STRONG><a name="[155]"></a>_fclose_internal</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[f0]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fclose
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread_line
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
</UL>

<P><STRONG><a name="[db]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>

<P><STRONG><a name="[d7]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fopen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr_channel
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfg_tcp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_file_cfg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_run_scene
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>

<P><STRONG><a name="[e2]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendUnicast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBroadcast
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[d9]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_real_time
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[158]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[245]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_register
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exe_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ar_swing
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scene
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_callback
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[15a]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[159]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fopen
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_addr_channel
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_ir
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_ir
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_scene
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_real_time
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_type_dim
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_task
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[249]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[df]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>

<P><STRONG><a name="[e1]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_scene
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[ac]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[24b]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[157]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[146]"></a>_printf_int_common</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[142]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[39]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[77]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[79]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[141]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[14e]"></a>_chval</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[14c]"></a>__vfscanf_char</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3a]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[162]"></a>_readbuf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[167]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[164]"></a>__filbuf</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[172]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[24d]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>_fseek</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[24e]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[16a]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[152]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[165]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[82]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[84]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[24f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[250]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[7f]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[251]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[16e]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7d]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[170]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[160]"></a>__vfscanf</STRONG> (Thumb, 900 bytes, Stack size 104 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[161]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[15f]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[171]"></a>__flsbuf</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[177]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[253]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[254]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[122]"></a>fread</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, freadfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __sys_read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fread
</UL>

<P><STRONG><a name="[166]"></a>_flushlinebuffered</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[16b]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[86]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[16d]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[124]"></a>fwrite</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, fwritefast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
</UL>

<P><STRONG><a name="[8a]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[174]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[173]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[16f]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[179]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[17a]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[216]"></a>__rt_fp_status_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[17b]"></a>CalcChksum</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, at_lib.o(i.CalcChksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CalcChksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
</UL>

<P><STRONG><a name="[17c]"></a>CalcChksumBuf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_lib.o(i.CalcChksumBuf))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[1fa]"></a>CalcChksumVal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.CalcChksumVal))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[17d]"></a>SwapB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.SwapB))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
</UL>

<P><STRONG><a name="[100]"></a>__sys_close</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __sys_close &rArr; fat_wclose &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_wclose
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[108]"></a>__sys_ensure</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_ensure), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>

<P><STRONG><a name="[10a]"></a>__sys_flen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs_sys.o(i.__sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[fe]"></a>__sys_open</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, fs_sys.o(i.__sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_create
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[104]"></a>__sys_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __sys_read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_read
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[106]"></a>__sys_seek</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_sys.o(i.__sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sys_seek &rArr; fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_seek
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[102]"></a>__sys_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_sys.o(i.__sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[149]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[11d]"></a>alloc_mem</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, at_mem.o(i.alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>

<P><STRONG><a name="[19f]"></a>arp_cache_add</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[1a4]"></a>arp_cache_find</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[1a5]"></a>arp_cache_update</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = arp_cache_update &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[aa]"></a>arp_send_req</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, at_arp.o(i.arp_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
</UL>

<P><STRONG><a name="[12d]"></a>dhcp_disable</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_dhcp.o(i.dhcp_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dhcp_disable &rArr; arp_notify &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_socket
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_close
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
</UL>

<P><STRONG><a name="[1c1]"></a>eth_chk_adr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ethernet.o(i.eth_chk_adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[a8]"></a>eth_send_frame</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_frame
</UL>

<P><STRONG><a name="[186]"></a>fat_create</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_fat.o(i.fat_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fat_create &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[185]"></a>fat_delete</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fat_delete &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
</UL>

<P><STRONG><a name="[1c7]"></a>fat_ffind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[184]"></a>fat_find</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, fs_fat.o(i.fat_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[1ca]"></a>fat_init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
</UL>

<P><STRONG><a name="[18a]"></a>fat_read</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fat_read &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_read
</UL>

<P><STRONG><a name="[1d0]"></a>fat_rename</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, fs_fat.o(i.fat_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fat_rename &rArr; rename_entries &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[18c]"></a>fat_seek</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fs_fat.o(i.fat_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fat_seek &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_seek
</UL>

<P><STRONG><a name="[17e]"></a>fat_wclose</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, fs_fat.o(i.fat_wclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fat_wclose &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_close
</UL>

<P><STRONG><a name="[18e]"></a>fat_write</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_chk_media
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_write
</UL>

<P><STRONG><a name="[10e]"></a>fdelete</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fs_mapi.o(i.fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fdelete &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_delete
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lock
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fdelete
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_ir
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_all_ir
</UL>

<P><STRONG><a name="[129]"></a>ffind</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, fs_mapi.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_fsize
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_ffind
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_ffind
</UL>

<P><STRONG><a name="[ef]"></a>fgetc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread_line
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_scene
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite_line
</UL>

<P><STRONG><a name="[f4]"></a>finit</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, fs_mapi.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = finit &rArr; init_drv &rArr; fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_cfg_drv
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_msd
</UL>

<P><STRONG><a name="[3e]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1a9]"></a>free_mem</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_mem.o(i.free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_kill_session
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_name
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>

<P><STRONG><a name="[127]"></a>frename</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, fs_mapi.o(i.frename))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = frename &rArr; fat_rename &rArr; rename_entries &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_find
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_rename
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_lock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_map_drive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_frename
</UL>

<P><STRONG><a name="[1d7]"></a>fs_cfg_drv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs_mapi.o(i.fs_cfg_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_cfg_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_config
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1c3]"></a>fs_chk_media</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fs_lib.o(i.fs_chk_media))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_chk_media
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1d3]"></a>fs_dir</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_lib.o(i.fs_dir))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
</UL>

<P><STRONG><a name="[182]"></a>fs_find_iob</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fs_lib.o(i.fs_find_iob))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[1e6]"></a>fs_get_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[1ea]"></a>fs_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[1d4]"></a>fs_lock</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, fs_lib.o(i.fs_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
</UL>

<P><STRONG><a name="[183]"></a>fs_map_drive</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, fs_lib.o(i.fs_map_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fs_map_drive
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fdelete
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sys_open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frename
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[1d5]"></a>fs_strpos</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_lib.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[1bf]"></a>get_crc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_lib.o(i.get_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[1ba]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[b5]"></a>init_TcpNet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_system.o(i.init_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = init_TcpNet &rArr; init_system &rArr; init_eth_link &rArr; init_ethernet &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mem
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>init_arp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, at_arp.o(i.init_arp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_arp
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[9d]"></a>init_dhcp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, at_dhcp.o(i.init_dhcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = init_dhcp &rArr; udp_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[98]"></a>init_eth_link</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_ethernet.o(i.init_eth_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_eth_link &rArr; init_ethernet &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arp
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[9b]"></a>init_ftp</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, at_ftp.o(i.init_ftp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_ftp &rArr; tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[1eb]"></a>init_mem</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at_mem.o(i.init_mem))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
</UL>

<P><STRONG><a name="[9c]"></a>init_nbns</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_nbns.o(i.init_nbns))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = init_nbns &rArr; udp_open
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[9a]"></a>init_tcp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_tcp.o(i.init_tcp))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[99]"></a>init_udp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_udp.o(i.init_udp))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[1ed]"></a>ip_chk_frame</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, at_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ip_chk_frame &rArr; eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[1f0]"></a>ip_get_locadr</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, at_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ip_get_locadr &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[1f1]"></a>ip_send_frame</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, at_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[1a1]"></a>is_subnet</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at_lib.o(i.is_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[1c2]"></a>is_subnet_bcast</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_arp.o(i.is_subnet_bcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = is_subnet_bcast &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[c3]"></a>main_TcpNet</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at_system.o(i.main_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = main_TcpNet &rArr; run_system &rArr; run_ftp_server &rArr; ftp_fopen &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>mem_comp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_lib.o(i.mem_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[1a3]"></a>mem_copy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_lib.o(i.mem_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TcpNet
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>

<P><STRONG><a name="[1aa]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_lib.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_release_socket
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>

<P><STRONG><a name="[12c]"></a>mem_test</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.mem_test))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[8f]"></a>mmc_Init</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mmc_Init &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_Init
</UL>

<P><STRONG><a name="[93]"></a>mmc_ReadInfo</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_ReadInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_ReadInfo &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdInfo
</UL>

<P><STRONG><a name="[91]"></a>mmc_ReadSector</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_ReadSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_ReadSector &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_RdSect
</UL>

<P><STRONG><a name="[90]"></a>mmc_UnInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_mmc.o(i.mmc_UnInit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_UnInit
</UL>

<P><STRONG><a name="[92]"></a>mmc_WriteSector</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_WriteSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_WriteSector &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc0_WrSect
</UL>

<P><STRONG><a name="[202]"></a>poll_ethernet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_ethernet.o(i.poll_ethernet))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[1f7]"></a>process_arp</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, at_arp.o(i.process_arp))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = process_arp &rArr; arp_send_reply &rArr; arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[203]"></a>process_hl_igmp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_ethernet.o(i.process_hl_igmp))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[1f8]"></a>process_icmp</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, at_icmp.o(i.process_icmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = process_icmp &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a6]"></a>process_tcp</STRONG> (Thumb, 1142 bytes, Stack size 40 bytes, at_tcp.o(i.process_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_opt
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_seq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_tcp
</UL>

<P><STRONG><a name="[a4]"></a>process_udp</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, at_udp.o(i.process_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_udp
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_udp
</UL>

<P><STRONG><a name="[11e]"></a>put_in_queue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_ethernet.o(i.put_in_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = put_in_queue &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>resize_mem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_mem.o(i.resize_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resize_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a2]"></a>run_dhcp_client</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, at_dhcp.o(i.run_dhcp_client))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = run_dhcp_client &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[9f]"></a>run_eth_link</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, at_ethernet.o(i.run_eth_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_igmp
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_ethernet
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_tcp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_udp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[a1]"></a>run_ftp_server</STRONG> (Thumb, 1546 bytes, Stack size 64 bytes, at_ftp.o(i.run_ftp_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = run_ftp_server &rArr; ftp_fopen &rArr; fopen &rArr; freopen &rArr; _sys_open &rArr; __sys_open &rArr; fat_find &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fdelete
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fread
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fopen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mask
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_ffind_busy
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_kill_session
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_name
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_max_dsize
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_state
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_buf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_ffind
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[1c0]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_lib.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[130]"></a>str_copy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.str_copy))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendUnicast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBroadcast
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[1df]"></a>str_ucomp</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_lib.o(i.str_ucomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_ucomp
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
</UL>

<P><STRONG><a name="[1f6]"></a>str_up_case</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at_lib.o(i.str_up_case))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
</UL>

<P><STRONG><a name="[1e3]"></a>tcp_abort</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_abort &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[13e]"></a>tcp_check_send</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_check_send))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[132]"></a>tcp_close</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_close &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[13d]"></a>tcp_connect</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_connect &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_free_port
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_seq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[13f]"></a>tcp_get_buf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_get_buf &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[1e4]"></a>tcp_get_free_port</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, at_tcp.o(i.tcp_get_free_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_get_free_port
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[136]"></a>tcp_get_socket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ftp
</UL>

<P><STRONG><a name="[13c]"></a>tcp_get_state</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_task
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[137]"></a>tcp_listen</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, at_tcp.o(i.tcp_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_listen
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ftp
</UL>

<P><STRONG><a name="[205]"></a>tcp_max_dsize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_max_dsize))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[a0]"></a>tcp_poll_sockets</STRONG> (Thumb, 542 bytes, Stack size 40 bytes, at_tcp.o(i.tcp_poll_sockets))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_poll_sockets &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[1dd]"></a>tcp_reset_tout</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_reset_tout))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_data_cb
</UL>

<P><STRONG><a name="[140]"></a>tcp_send</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, at_tcp.o(i.tcp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_send &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[e7]"></a>timer_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_system.o(i.timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_poll
</UL>

<P><STRONG><a name="[1b8]"></a>udp_close</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at_udp.o(i.udp_close))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>

<P><STRONG><a name="[12f]"></a>udp_get_buf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_udp.o(i.udp_get_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_get_buf &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendUnicast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBroadcast
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>

<P><STRONG><a name="[138]"></a>udp_get_socket</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at_udp.o(i.udp_get_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nbns
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[139]"></a>udp_open</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, at_udp.o(i.udp_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_nbns
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dhcp
</UL>

<P><STRONG><a name="[1b9]"></a>udp_release_socket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_udp.o(i.udp_release_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_release_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_disable
</UL>

<P><STRONG><a name="[131]"></a>udp_send</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, at_udp.o(i.udp_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbns_listener
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendUnicast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBroadcast
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_callback
</UL>

<P><STRONG><a name="[3c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[20a]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[20f]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[255]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[20e]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[212]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[d1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[210]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[20c]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[211]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_new_ir
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_detect_swing
</UL>

<P><STRONG><a name="[213]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[215]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[7b]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[257]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[258]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_task
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_rcv_touch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;repeat_IR
</UL>

<P><STRONG><a name="[c6]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[f3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_task
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EINT
</UL>

<P><STRONG><a name="[f2]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, extint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_task
</UL>

<P><STRONG><a name="[5a]"></a>mc0_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mc0_Init &rArr; mmc_Init &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>mc0_UnInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_UnInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>mc0_RdSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_RdSect &rArr; mmc_ReadSector &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>mc0_WrSect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mc0_WrSect &rArr; mmc_WriteSector &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_WriteSector
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>mc0_RdInfo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, file_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mc0_RdInfo &rArr; mmc_ReadInfo &rArr; mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>mc0_ChkMedia</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, file_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> file_config.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>UnInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>Send</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>SendBuf</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, spi_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SendBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>RecBuf</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, spi_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RecBuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>BusSpeed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>SetSS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>CheckMedia</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_lpc17xx.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ir.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;learn_ir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ir
</UL>

<P><STRONG><a name="[119]"></a>output_MDIO</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>

<P><STRONG><a name="[118]"></a>read_PHY</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_PHY &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[11b]"></a>write_PHY</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_PHY &rArr; output_MDIO
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[11a]"></a>turnaround_MDIO</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>

<P><STRONG><a name="[1d8]"></a>init_drv</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, fs_mapi.o(i.init_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_drv &rArr; fat_init &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[1f2]"></a>mmc_command</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_info
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
</UL>

<P><STRONG><a name="[1f4]"></a>mmc_read_block</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadSector
</UL>

<P><STRONG><a name="[1f3]"></a>mmc_read_info</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_read_info &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_ReadInfo
</UL>

<P><STRONG><a name="[1f5]"></a>mmc_write_block</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_WriteSector
</UL>

<P><STRONG><a name="[1a2]"></a>arp_cache_alloc</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, at_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[1a6]"></a>arp_get_response</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, at_arp.o(i.arp_get_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = arp_get_response &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
</UL>

<P><STRONG><a name="[1a7]"></a>arp_send_reply</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = arp_send_reply &rArr; arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
</UL>

<P><STRONG><a name="[200]"></a>tcp_init_seq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_init_seq))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[1f9]"></a>tcp_map_socket</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_map_socket &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[1ff]"></a>tcp_process_opt</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, at_tcp.o(i.tcp_process_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_process_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[1fd]"></a>tcp_send_ctrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[207]"></a>tcp_send_frame</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, at_tcp.o(i.tcp_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
</UL>

<P><STRONG><a name="[1fe]"></a>tcp_send_reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[1fb]"></a>tcp_set_retransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_set_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_set_retransmit &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[201]"></a>tcp_transit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_transit &rArr; tcp_set_retransmit &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[44]"></a>nbns_listener</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, at_nbns.o(i.nbns_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = nbns_listener &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_up_case
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_nbns.o(i.init_nbns)
</UL>
<P><STRONG><a name="[41]"></a>dhcp_listener</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, at_dhcp.o(i.dhcp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dhcp_listener &rArr; dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_sel
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_req
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_opt_renew
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_send_message
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_dhcp.o(i.init_dhcp)
</UL>
<P><STRONG><a name="[1bc]"></a>dhcp_send_message</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, at_dhcp.o(i.dhcp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dhcp_send_message &rArr; udp_send &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_get_buf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_dhcp_client
</UL>

<P><STRONG><a name="[1be]"></a>proc_opt_renew</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, at_dhcp.o(i.proc_opt_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = proc_opt_renew
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[1bd]"></a>proc_opt_req</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, at_dhcp.o(i.proc_opt_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_opt_req &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[1bb]"></a>proc_opt_sel</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_dhcp.o(i.proc_opt_sel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_opt_sel &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_listener
</UL>

<P><STRONG><a name="[1b0]"></a>close_file</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_ftp.o(i.close_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = close_file &rArr; ftp_fclose &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_kill_session
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_data_cb
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[1d9]"></a>free_name</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_ftp.o(i.free_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free_name &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_kill_session
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[43]"></a>ftp_data_cb</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, at_ftp.o(i.ftp_data_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ftp_data_cb &rArr; ftp_fwrite &rArr; fwrite &rArr; _writebuf &rArr; _sys_write &rArr; __sys_write &rArr; fat_write &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fwrite
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_map_session
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_reset_tout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_ftp.o(i.init_ftp)
</UL>
<P><STRONG><a name="[1de]"></a>ftp_kill_session</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at_ftp.o(i.ftp_kill_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ftp_kill_session &rArr; close_file &rArr; ftp_fclose &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_name
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_file
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[42]"></a>ftp_listener</STRONG> (Thumb, 1440 bytes, Stack size 48 bytes, at_ftp.o(i.ftp_listener))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ftp_listener &rArr; ftp_frename &rArr; frename &rArr; fat_rename &rArr; rename_entries &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fdelete
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_fopen
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_ucomp
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_path
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_path
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fname
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_map_session
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_kill_session
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_name
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_get_free_port
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_frename
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_ftp.o(i.init_ftp)
</UL>
<P><STRONG><a name="[1dc]"></a>ftp_map_session</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_ftp.o(i.ftp_map_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ftp_map_session
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_data_cb
</UL>

<P><STRONG><a name="[1e0]"></a>get_fname</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_ftp.o(i.get_fname))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
</UL>

<P><STRONG><a name="[204]"></a>is_ffind_busy</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, at_ftp.o(i.is_ffind_busy))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[1e2]"></a>make_path</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, at_ftp.o(i.make_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = make_path &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_copy
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
</UL>

<P><STRONG><a name="[206]"></a>set_mask</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, at_ftp.o(i.set_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ftp_server
</UL>

<P><STRONG><a name="[1e1]"></a>store_path</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, at_ftp.o(i.store_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = store_path
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftp_listener
</UL>

<P><STRONG><a name="[192]"></a>alloc_name</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = alloc_name &rArr; alloc_new_clus &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[197]"></a>alloc_new_clus</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fs_fat.o(i.alloc_new_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = alloc_new_clus &rArr; write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[19e]"></a>cache_fat</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[193]"></a>check_lfn</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_fat.o(i.check_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[1ac]"></a>check_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.check_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1ae]"></a>chk_dir_empty</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fs_fat.o(i.chk_dir_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = chk_dir_empty &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[198]"></a>clear_clus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[199]"></a>clus_to_sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[1b1]"></a>count_free_clus</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, fs_fat.o(i.count_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = count_free_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1b3]"></a>cvt_fatname</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_fat.o(i.cvt_fatname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cvt_fatname &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[1b5]"></a>delete_entries</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fs_fat.o(i.delete_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = delete_entries &rArr; unlink_clus_chain &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[1c4]"></a>fat_find_dir</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, fs_fat.o(i.fat_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[1c6]"></a>find_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.find_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = find_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[19c]"></a>get_EOC</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1cc]"></a>get_bootrec</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, fs_fat.o(i.get_bootrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_bootrec &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1e5]"></a>get_date</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fs_fat.o(i.get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_date
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>

<P><STRONG><a name="[194]"></a>get_dir_sect</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fs_fat.o(i.get_dir_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dir_sect
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1b2]"></a>get_fat_sect</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[19b]"></a>get_free_clus</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, fs_fat.o(i.get_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_free_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
</UL>

<P><STRONG><a name="[1cd]"></a>get_fsinfo</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fs_fat.o(i.get_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fsinfo &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[1c8]"></a>get_next_info</STRONG> (Thumb, 442 bytes, Stack size 56 bytes, fs_fat.o(i.get_next_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_next_info &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[1e8]"></a>get_nt_name</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, fs_fat.o(i.get_nt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_nt_name &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[1e9]"></a>get_time</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs_fat.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>

<P><STRONG><a name="[1cb]"></a>get_u32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[196]"></a>is_EOC</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fs_fat.o(i.is_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
</UL>

<P><STRONG><a name="[1e7]"></a>lfn_calc_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_calc_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
</UL>

<P><STRONG><a name="[1cf]"></a>read_cache</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_cache &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[1d2]"></a>read_last_entry</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_fat.o(i.read_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_last_entry &rArr; read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[19a]"></a>read_sector</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1d1]"></a>rename_entries</STRONG> (Thumb, 122 bytes, Stack size 64 bytes, fs_fat.o(i.rename_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rename_entries &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_rename
</UL>

<P><STRONG><a name="[1ad]"></a>search_for_name</STRONG> (Thumb, 552 bytes, Stack size 96 bytes, fs_fat.o(i.search_for_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>

<P><STRONG><a name="[195]"></a>set_next_clus</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, fs_fat.o(i.set_next_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_seek
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[208]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
</UL>

<P><STRONG><a name="[209]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
</UL>

<P><STRONG><a name="[1b7]"></a>unlink_clus_chain</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, fs_fat.o(i.unlink_clus_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = unlink_clus_chain &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[1b4]"></a>val_char</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_fat.o(i.val_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>

<P><STRONG><a name="[1ab]"></a>val_char_sn</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fs_fat.o(i.val_char_sn))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>

<P><STRONG><a name="[1af]"></a>write_cache</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1c9]"></a>write_dot_entries</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fs_fat.o(i.write_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_dot_entries &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[1c5]"></a>write_entries</STRONG> (Thumb, 710 bytes, Stack size 144 bytes, fs_fat.o(i.write_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename_entries
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
</UL>

<P><STRONG><a name="[19d]"></a>write_fat_link</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, fs_fat.o(i.write_fat_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_fat_link &rArr; cache_fat
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1ce]"></a>write_fsinfo</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, fs_fat.o(i.write_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_fsinfo &rArr; write_cache &rArr; write_sector
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1b6]"></a>write_sector</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_wclose
</UL>

<P><STRONG><a name="[1ef]"></a>ip_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ip_get_chksum &rArr; CalcChksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[214]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[20b]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[3d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
